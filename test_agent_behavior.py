#!/usr/bin/env python3
"""
Script de test pour v√©rifier le comportement de l'agent avec les nouvelles instructions
"""

import sys
import re
import json
import os
import logging

# Ajouter le chemin vers AstroBot
sys.path.append('AstroBot')

from AstroBot.agents.strategist_agent import StrategistAgent

def main():
    """Test du comportement de l'agent"""
    
    print("üß™ TEST DU COMPORTEMENT DE L'AGENT")
    print("=" * 60)
    
    try:
        # Configuration du logger
        logging.basicConfig(level=logging.INFO)
        logger = logging.getLogger(__name__)
        
        # Configuration minimale pour l'agent
        shared_state = {
            'config': {
                'workspace': 'AstroBot/workspace',
                'question_script': 'AstroBot/scripts/question.py',
                'enriched_prospects_file': 'AstroBot/workspace/enriched_prospects.json'
            },
            'logger': logger,
            'status': {}
        }
        
        # Cr√©er une instance de l'agent
        agent = StrategistAgent(shared_state)
        
        # Charger la configuration des banques
        with open('AstroBot/workspace/memory_banks_config.json', 'r', encoding='utf-8') as f:
            banks_config = json.load(f)
        
        # Tester la banque #1
        bank_1 = banks_config['banks']['1']
        print(f"üìù Test de la banque : {bank_1['name']}")
        print(f"üé≠ Arch√©type : {bank_1['archetype']}")
        
        # G√©n√©rer un message
        print("\nüîÑ G√©n√©ration du message...")
        message = agent._generate_message_with_bank(bank_1, 'test')
        
        print("\n" + "=" * 50)
        print("MESSAGE G√âN√âR√â :")
        print("=" * 50)
        print(message)
        print("=" * 50)
        
        # Analyser le message
        placeholders = len(re.findall(r'\[Lien vers [^\]]+\]', message))
        urls = len(re.findall(r'https?://[^\s]+', message))
        
        print(f"\nüìä ANALYSE DU MESSAGE :")
        print(f"  ‚Ä¢ Placeholders d√©tect√©s : {placeholders}")
        print(f"  ‚Ä¢ URLs directes : {urls}")
        
        if urls > 0:
            print("‚ö†Ô∏è L'agent a encore utilis√© des URLs directes !")
            print("üí° Le syst√®me de correction devrait les remplacer automatiquement")
        else:
            print("‚úÖ L'agent utilise correctement les placeholders !")
        
        # V√©rifier si le syst√®me de correction a fonctionn√©
        if placeholders > 0:
            print("‚úÖ Le syst√®me de placeholders fonctionne")
        else:
            print("‚ùå Aucun placeholder d√©tect√©")
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test : {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 