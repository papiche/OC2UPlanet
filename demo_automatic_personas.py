#!/usr/bin/env python3
"""
D√©monstration de la cr√©ation automatique de personas avec IA
Utilise l'IA r√©elle pour g√©n√©rer des personas bas√©s sur les th√®mes d√©tect√©s
"""

import sys
import json
import os
import subprocess

# Ajouter le chemin vers AstroBot
sys.path.append('AstroBot')

def generate_persona_with_ai(theme, theme_count, related_themes):
    """G√©n√®re un persona avec l'IA pour un th√®me donn√©"""
    
    prompt = f"""Tu es un expert en cr√©ation de personas marketing. Tu dois cr√©er un persona complet pour une campagne de communication UPlanet.

TH√àME PRINCIPAL : {theme}
OCCURRENCES D√âTECT√âES : {theme_count}
TH√àMES ASSOCI√âS : {', '.join(related_themes[:10])}

T√ÇCHE : Cr√©er un persona marketing complet avec :
1. Un nom accrocheur et m√©morable
2. Un arch√©type psychologique pr√©cis
3. Une description du profil type
4. Un corpus de communication (vocabulaire, arguments, ton, exemples)

Le persona doit √™tre adapt√© pour communiquer avec des personnes int√©ress√©es par le th√®me "{theme}" dans le contexte d'UPlanet (monnaie libre, identit√© num√©rique, d√©centralisation).

R√âPONSE ATTENDUE (JSON strict) :
{{
    "name": "Nom du Persona",
    "archetype": "Arch√©type psychologique",
    "description": "Description d√©taill√©e du profil type",
    "corpus": {{
        "tone": "Ton de communication (ex: bienveillant, technique, militant)",
        "vocabulary": ["mot1", "mot2", "mot3", "mot4", "mot5"],
        "arguments": [
            "Argument principal 1",
            "Argument principal 2", 
            "Argument principal 3"
        ],
        "examples": [
            "Exemple de phrase 1",
            "Exemple de phrase 2",
            "Exemple de phrase 3"
        ]
    }}
}}

IMPORTANT : 
- Le vocabulaire doit √™tre sp√©cifique au th√®me {theme}
- Les arguments doivent expliquer pourquoi UPlanet int√©resse ce profil
- Le ton doit √™tre adapt√© √† l'arch√©type
- Les exemples doivent √™tre des phrases compl√®tes et engageantes
- R√©ponds UNIQUEMENT en JSON valide, sans commentaire."""

    try:
        # Utiliser le script question.py
        question_script = os.path.expanduser("~/.zen/Astroport.ONE/IA/question.py")
        if not os.path.exists(question_script):
            print(f"‚ùå Script question.py non trouv√© : {question_script}")
            return None
        
        result = subprocess.run(
            ['python3', question_script],
            input=prompt,
            text=True,
            capture_output=True,
            timeout=30
        )
        
        if result.returncode != 0:
            print(f"‚ùå Erreur lors de l'appel √† l'IA : {result.stderr}")
            return None
        
        # Nettoyer la r√©ponse
        response = result.stdout.strip()
        
        # Trouver le JSON dans la r√©ponse
        json_start = response.find('{')
        json_end = response.rfind('}') + 1
        
        if json_start == -1 or json_end == 0:
            print(f"‚ùå R√©ponse IA invalide pour {theme}")
            return None
        
        json_str = response[json_start:json_end]
        persona = json.loads(json_str)
        
        # Validation
        required_keys = ['name', 'archetype', 'description', 'corpus']
        corpus_keys = ['tone', 'vocabulary', 'arguments', 'examples']
        
        if not all(key in persona for key in required_keys):
            print(f"‚ùå Structure du persona invalide pour {theme}")
            return None
            
        if not all(key in persona['corpus'] for key in corpus_keys):
            print(f"‚ùå Structure du corpus invalide pour {theme}")
            return None
        
        return persona
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration du persona pour {theme} : {e}")
        return None

def demo_automatic_personas():
    """D√©monstration de la cr√©ation automatique de personas"""
    
    print("üé≠ D√âMONSTRATION : CR√âATION AUTOMATIQUE DE PERSONAS")
    print("=" * 60)
    
    # Th√®mes de d√©monstration (bas√©s sur des donn√©es r√©elles typiques)
    demo_themes = [
        ("developpeur", 45, ["technologie", "programmation", "open-source", "logiciel-libre", "crypto", "blockchain"]),
        ("militant", 32, ["liberte", "privacy", "decentralisation", "resistance", "alternatives", "engagement"]),
        ("artiste", 28, ["creation", "culture", "numerique", "expression", "innovation", "beaute"]),
        ("economiste", 25, ["monnaie", "finance", "alternative", "economie", "tresor", "echange"]),
        ("therapeute", 18, ["holistique", "bien-etre", "sante", "equilibre", "harmonie", "conscience"])
    ]
    
    print(f"üìä Th√®mes de d√©monstration (bas√©s sur des donn√©es r√©elles) :")
    for i, (theme, count, related) in enumerate(demo_themes, 1):
        print(f"  {i}. {theme} ({count} occurrences)")
    
    # Charger la configuration des banques existante
    banks_config_file = 'AstroBot/workspace/memory_banks_config.json'
    if os.path.exists(banks_config_file):
        with open(banks_config_file, 'r', encoding='utf-8') as f:
            banks_config = json.load(f)
    else:
        banks_config = {'banks': {}, 'available_themes': []}
    
    print(f"\nüé≠ G√©n√©ration des personas avec l'IA...")
    print(f"‚è≥ Cela peut prendre quelques minutes...")
    
    # Cr√©er les personas pour les banques 5-9
    for i, (theme, count, related_themes) in enumerate(demo_themes):
        bank_slot = str(5 + i)
        
        print(f"\nüé≠ G√©n√©ration du persona pour '{theme}' (banque {bank_slot})...")
        
        # G√©n√©rer le persona avec l'IA
        persona = generate_persona_with_ai(theme, count, related_themes)
        
        if persona:
            # Remplir la banque
            banks_config['banks'][bank_slot] = {
                'name': persona['name'],
                'archetype': persona['archetype'],
                'description': persona['description'],
                'themes': [theme],
                'corpus': persona['corpus']
            }
            
            print(f"  ‚úÖ {persona['name']} ({persona['archetype']})")
            print(f"     Ton : {persona['corpus']['tone']}")
            print(f"     Vocabulaire : {', '.join(persona['corpus']['vocabulary'][:3])}...")
        else:
            print(f"  ‚ùå √âchec de g√©n√©ration pour '{theme}'")
    
    # Sauvegarder la configuration
    os.makedirs('AstroBot/workspace', exist_ok=True)
    with open(banks_config_file, 'w', encoding='utf-8') as f:
        json.dump(banks_config, f, indent=2, ensure_ascii=False)
    
    print(f"\nüéâ G√©n√©ration termin√©e !")
    
    # Afficher le r√©sum√©
    print(f"\nüìã R√âSUM√â DES PERSONAS CR√â√âS :")
    for i, (theme, count, related) in enumerate(demo_themes):
        bank_slot = str(5 + i)
        bank = banks_config['banks'].get(bank_slot, {})
        if bank:
            print(f"\n  üé≠ Banque {bank_slot} : {bank['name']}")
            print(f"     Arch√©type : {bank['archetype']}")
            print(f"     Th√®me : {theme}")
            print(f"     Ton : {bank['corpus']['tone']}")
            print(f"     Arguments :")
            for arg in bank['corpus']['arguments'][:2]:
                print(f"       ‚Ä¢ {arg}")
            print(f"     Exemples :")
            for ex in bank['corpus']['examples'][:1]:
                print(f"       ‚Ä¢ {ex}")

def main():
    """D√©monstration principale"""
    demo_automatic_personas()
    
    print(f"\n‚úÖ D√©monstration termin√©e !")
    print(f"üí° Les personas ont √©t√© g√©n√©r√©s avec l'IA r√©elle")
    print(f"üí° Ils sont maintenant disponibles dans les banques 5-9")
    print(f"üí° Vous pouvez les utiliser dans l'Agent Strat√®ge")

if __name__ == "__main__":
    main() 