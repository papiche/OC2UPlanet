from .base_agent import Agent
import json
import os
import subprocess
import time
import tempfile
from datetime import datetime

class OperatorAgent(Agent):
    """
    L'agent Op√©rateur est un dispatcher multicanal intelligent. Il ex√©cute la campagne,
    informe l'utilisateur sur le processus, et ajoute une option de d√©sinscription.
    """
    def _prepare_message(self, template: str, target: dict) -> str:
        """
        Pr√©pare le message final et personnalis√© en rempla√ßant toutes les variables.
        """
        # R√©cup√©rer les variables depuis la config
        url_oc = self.shared_state['config']['URL_OPEN_COLLECTIVE']
        opt_out_message = "\n\n---\n fred@g1sms.fr Pour ne plus recevoir de messages, r√©pondez simplement 'STOP'."
        
        # Remplacer les placeholders
        message = template.replace("{{uid}}", target.get('uid', ''))
        message = message.replace("[URL_OPEN_COLLECTIVE]", url_oc)
        
        # Ajouter l'opt-out
        message += opt_out_message
        
        return message

    def run(self):
        """Menu principal de l'Agent Op√©rateur"""
        while True:
            print("\n" + "="*50)
            print("           ü§ñ AGENT OP√âRATEUR")
            print("="*50)
            print("1. üì§ ENVOYER - Lancer la campagne")
            print("2. üì• RECEVOIR - Consulter la messagerie")
            print("3. üìä √âtat des interactions")
            print("4. Retour au menu principal")
            
            try:
                choice = input("\n> ")
            except KeyboardInterrupt:
                print("\nRetour au menu principal...")
                break
            
            if choice == "1":
                self._run_send_campaign()
            elif choice == "2":
                self._run_receive_messages()
            elif choice == "3":
                self._show_interaction_status()
            elif choice == "4":
                break
            else:
                print("‚ùå Choix invalide")

    def _run_send_campaign(self):
        """Lance l'envoi de la campagne"""
        self.logger.info("ü§ñ Agent Op√©rateur : Lancement de la campagne.")
        self.shared_state['status']['OperatorAgent'] = "Envoi en cours."

        # --- 1. V√©rifier les pr√©requis ---
        workspace = self.shared_state['config']['workspace']
        targets_file = os.path.join(workspace, 'todays_targets.json')
        message_file = os.path.join(workspace, 'message_to_send.txt')

        if not os.path.exists(targets_file) or not os.path.exists(message_file):
            self.logger.error("‚ùå Fichiers de cibles ou de message manquants.")
            print("‚ùå Fichiers de cibles ou de message manquants.")
            self.shared_state['status']['OperatorAgent'] = "√âchec : Pr√©requis manquants."
            return

        # --- 2. Charger les donn√©es ---
        try:
            with open(targets_file, 'r') as f: targets = json.load(f)
            with open(message_file, 'r') as f: message_template = f.read()
        except Exception as e:
            self.logger.error(f"‚ùå Erreur de lecture des fichiers : {e}")
            print(f"‚ùå Erreur de lecture des fichiers : {e}")
            self.shared_state['status']['OperatorAgent'] = "√âchec : Fichiers corrompus."
            return

        if not targets:
            self.logger.warning("‚ö†Ô∏è Aucune cible s√©lectionn√©e.")
            print("‚ö†Ô∏è Aucune cible s√©lectionn√©e.")
            self.shared_state['status']['OperatorAgent'] = "Termin√© : Aucune cible."
            return

        # --- 3. S√©lection du canal ---
        print("\nüì° Choisissez le canal d'envoi :")
        print("1. Jaklis (Message priv√© Cesium+)")
        print("2. Mailjet (Email)")
        print("3. Nostr (DM pour les d√©tenteurs de MULTIPASS)")
        try:
            channel_choice = input("> ")
        except KeyboardInterrupt:
            self.logger.info("üö´ Envoi annul√©.")
            self.shared_state['status']['OperatorAgent'] = "Annul√© par l'utilisateur."
            return

        # --- 4. Validation finale ---
        channel_name = {
            '1': 'Jaklis', '2': 'Mailjet', '3': 'Nostr (DM)'
        }.get(channel_choice, 'Inconnu')
        
        # Pr√©parer un exemple de message pour l'aper√ßu
        example_target = targets[0] if targets else {"uid": "Exemple"}
        final_message_preview = self._prepare_message(message_template, example_target)

        print("\n" + "="*60)
        print("           üì§ VALIDATION FINALE")
        print("="*60)
        print(f"üì° Canal : {channel_name}")
        print(f"üéØ Cibles : {len(targets)}")
        print(f"‚è±Ô∏è  D√©lai : {self.shared_state['config']['send_delay_seconds']} secondes")
        print("\n--- MESSAGE QUI SERA ENVOY√â ---")
        print(final_message_preview)
        print("--- FIN DU MESSAGE ---")

        print("\nüöÄ Lancer la campagne ? (oui/non) : ", end='', flush=True)
        try:
            confirm = input().lower().strip()
            if confirm not in ['o', 'oui', 'y', 'yes']:
                self.logger.info("üö´ Envoi annul√©.")
                self.shared_state['status']['OperatorAgent'] = "Annul√© par l'utilisateur."
                return
        except KeyboardInterrupt:
            self.logger.info("üö´ Envoi annul√©.")
            self.shared_state['status']['OperatorAgent'] = "Annul√© par l'utilisateur."
            return

        # Trouver un slot disponible
        available_slot = self._find_available_slot()
        if available_slot is None:
            self.logger.error("‚ùå Aucun slot disponible (tous les slots 0-11 sont utilis√©s)")
            print("‚ùå Aucun slot disponible. Veuillez nettoyer les anciennes campagnes.")
            self.shared_state['status']['OperatorAgent'] = "√âchec : Aucun slot disponible."
            return
        
        # Sauvegarder les informations de la campagne
        self._save_campaign_info(available_slot, targets, message_template)
        
        # D√©marrer la campagne pour de bon
        if channel_choice == '1':
            self.send_with_jaklis(targets, message_template, available_slot)
        elif channel_choice == '2':
            self.send_with_mailjet(targets, message_template, available_slot)
        elif channel_choice == '3':
            self.send_with_nostr(targets, message_template, available_slot)
        else:
            self.logger.error("Choix de canal invalide.")
            self.shared_state['status']['OperatorAgent'] = "√âchec : Canal invalide."

    def _run_receive_messages(self):
        """Consulte la messagerie et g√®re les r√©ponses automatiquement"""
        print("\nüì• CONSULTATION DE LA MESSAGERIE")
        print("="*50)
        
        try:
            # Utiliser Jaklis pour r√©cup√©rer les nouveaux messages
            captain_email_file = os.path.expanduser("~/.zen/game/players/.current/.player")
            with open(captain_email_file, 'r') as f:
                captain_email = f.read().strip()
            
            secret_key_path = os.path.expanduser(f"~/.zen/game/nostr/{captain_email}/.secret.dunikey")
            cesium_node = self.shared_state['config']['cesium_node']
            jaklis_script = self.shared_state['config']['jaklis_script']
            
            print(f"üîç Consultation de la messagerie Cesium+ pour {captain_email}...")
            
            # R√©cup√©rer les messages r√©cents
            command = [
                'python3', jaklis_script,
                '-k', secret_key_path,
                '-n', cesium_node,
                'read',
                '-j'
            ]
            
            result = subprocess.run(command, capture_output=True, text=True, check=True)
            messages_output = result.stdout
            
            # Analyser les messages pour identifier les r√©ponses
            new_responses = self._parse_messages_for_responses(messages_output)
            
            if not new_responses:
                print("‚úÖ Aucune nouvelle r√©ponse d√©tect√©e.")
                return
            
            print(f"üì® {len(new_responses)} nouvelle(s) r√©ponse(s) d√©tect√©e(s) :")
            
            for i, response in enumerate(new_responses, 1):
                print(f"\n--- R√©ponse {i}/{len(new_responses)} ---")
                print(f"De : {response['sender_uid']} ({response['sender_pubkey'][:10]}...)")
                print(f"Message : {response['content'][:100]}...")
                
                # Proposer de traiter automatiquement
                print("\nOptions :")
                print("1. Traiter automatiquement")
                print("2. Ignorer")
                print("3. Traiter manuellement")
                
                try:
                    choice = input("> ")
                    if choice == "1":
                        self._process_response_automatically(response)
                    elif choice == "3":
                        self._process_response_manually(response)
                    else:
                        print("‚è≠Ô∏è R√©ponse ignor√©e.")
                        
                except KeyboardInterrupt:
                    print("\n‚è≠Ô∏è R√©ponse ignor√©e.")
                    continue
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de la consultation de la messagerie : {e}")
            print(f"‚ùå Erreur : {e}")

    def _parse_messages_for_responses(self, messages_output):
        """Parse la sortie JSON de Jaklis pour identifier les r√©ponses"""
        responses = []
        
        try:
            # Parser le JSON de Jaklis
            messages = json.loads(messages_output)
            
            # Charger l'historique des interactions pour identifier les r√©ponses
            memory_dir = self.setup_memory_system()
            sent_messages = set()
            
            # R√©cup√©rer tous les pubkeys √† qui on a envoy√© des messages
            for slot in range(12):
                slot_dir = os.path.join(memory_dir, f'slot_{slot}')
                if os.path.exists(slot_dir):
                    files = [f.replace('.json', '') for f in os.listdir(slot_dir) if f.endswith('.json')]
                    sent_messages.update(files)
            
            # Analyser chaque message
            for message in messages:
                if isinstance(message, dict):
                    sender_pubkey = message.get('pubkey', '')
                    content = message.get('content', '')
                    title = message.get('title', '')
                    date = message.get('date', 0)
                    
                    # V√©rifier si c'est une r√©ponse √† nos messages
                    if sender_pubkey in sent_messages:
                        # C'est une r√©ponse potentielle
                        responses.append({
                            'sender_pubkey': sender_pubkey,
                            'sender_uid': self._get_uid_from_pubkey(sender_pubkey),
                            'content': content,
                            'title': title,
                            'timestamp': self._format_timestamp(date),
                            'date_unix': date
                        })
            
            # Trier par date (plus r√©cent en premier)
            responses.sort(key=lambda x: x['date_unix'], reverse=True)
            
            # Filtrer pour ne garder que les r√©ponses r√©centes (derni√®res 24h)
            current_time = time.time()
            recent_responses = [
                r for r in responses 
                if (current_time - r['date_unix']) < 86400  # 24h en secondes
            ]
            
            return recent_responses
            
        except json.JSONDecodeError as e:
            self.logger.error(f"Erreur de parsing JSON : {e}")
            return []
        except Exception as e:
            self.logger.error(f"Erreur lors du parsing des messages : {e}")
            return []

    def _get_uid_from_pubkey(self, pubkey):
        """R√©cup√®re l'UID depuis la base de connaissance"""
        try:
            kb_file = self.shared_state['config']['enriched_prospects_file']
            if os.path.exists(kb_file):
                with open(kb_file, 'r') as f:
                    knowledge_base = json.load(f)
                
                if pubkey in knowledge_base:
                    profile = knowledge_base[pubkey].get('profile', {})
                    if profile and '_source' in profile:
                        return profile['_source'].get('uid', 'Unknown')
        except Exception as e:
            self.logger.debug(f"Erreur lors de la r√©cup√©ration de l'UID : {e}")
        
        return 'Unknown'

    def _format_timestamp(self, unix_timestamp):
        """Formate un timestamp Unix en format lisible"""
        try:
            dt = datetime.fromtimestamp(unix_timestamp)
            return dt.strftime("%Y-%m-%d %H:%M:%S")
        except:
            return "Date inconnue"

    def _process_response_automatically(self, response):
        """Traite automatiquement une r√©ponse re√ßue"""
        try:
            print(f"ü§ñ Traitement automatique de la r√©ponse de {response['sender_uid']}...")
            
            # Trouver le slot correspondant √† cette interaction
            target_slot = self._find_slot_for_pubkey(response['sender_pubkey'])
            
            if target_slot is None:
                print("‚ö†Ô∏è Aucun historique d'interaction trouv√©. Traitement manuel recommand√©.")
                return
            
            print(f"üìÇ Slot identifi√© : {target_slot}")
            
            # V√©rifier si c'est une r√©ponse √† un message envoy√©
            history = self.get_interaction_history(response['sender_pubkey'], target_slot)
            
            if not history:
                print("‚ö†Ô∏è Aucun historique d'interaction trouv√© dans ce slot.")
                return
            
            # Enregistrer la r√©ponse re√ßue
            last_interaction = history[-1]
            self.record_interaction(
                response['sender_pubkey'],
                response['sender_uid'],
                last_interaction['message_sent'],
                response['content'],
                target_slot
            )
            
            # Traiter la r√©ponse
            auto_response = self.process_incoming_response(
                response['sender_pubkey'],
                response['sender_uid'],
                response['content'],
                target_slot
            )
            
            if auto_response:
                print("‚úÖ R√©ponse automatique g√©n√©r√©e et envoy√©e.")
                print(f"üìù R√©ponse : {auto_response[:100]}...")
            else:
                print("‚ö†Ô∏è R√©ponse n√©cessite une intervention manuelle.")
                
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors du traitement automatique : {e}")
            print(f"‚ùå Erreur : {e}")

    def _find_slot_for_pubkey(self, pubkey):
        """Trouve le slot correspondant √† un pubkey"""
        memory_dir = self.setup_memory_system()
        
        for slot in range(12):
            slot_dir = os.path.join(memory_dir, f'slot_{slot}')
            if os.path.exists(slot_dir):
                slot_file = os.path.join(slot_dir, f'{pubkey}.json')
                if os.path.exists(slot_file):
                    return slot
        
        return None

    def _process_response_manually(self, response):
        """Traite manuellement une r√©ponse re√ßue"""
        print(f"üë§ Traitement manuel de la r√©ponse de {response['sender_uid']}")
        print(f"Message complet : {response['content']}")
        
        # Permettre √† l'utilisateur de choisir une banque de m√©moire
        print("\nS√©lectionnez une banque de m√©moire pour la r√©ponse :")
        try:
            banks_config_file = os.path.join(self.shared_state['config']['workspace'], 'memory_banks_config.json')
            with open(banks_config_file, 'r') as f:
                banks_config = json.load(f)
            
            for slot, bank in banks_config.get('banks', {}).items():
                if bank.get('corpus'):
                    print(f"{slot}. {bank['name']} - {bank['archetype']}")
            
            choice = input("\nNum√©ro de la banque (ou Entr√©e pour automatique) : ")
            
            if choice.strip():
                # Utiliser la banque s√©lectionn√©e
                selected_bank = banks_config.get('banks', {}).get(choice)
                if selected_bank:
                    print(f"‚úÖ Banque s√©lectionn√©e : {selected_bank['name']}")
                    # Ici on pourrait g√©n√©rer une r√©ponse avec la banque sp√©cifique
                else:
                    print("‚ùå Banque invalide.")
            else:
                print("ü§ñ G√©n√©ration automatique...")
                self._process_response_automatically(response)
                
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors du traitement manuel : {e}")
            print(f"‚ùå Erreur : {e}")

    def _show_interaction_status(self):
        """Affiche l'√©tat d√©taill√© des campagnes et interactions"""
        print("\nüìä √âTAT DES CAMPAGNES ET INTERACTIONS")
        print("="*60)
        
        try:
            memory_dir = self.setup_memory_system()
            campaigns_file = os.path.join(memory_dir, 'campaigns.json')
            
            # Charger les informations des campagnes
            campaigns_info = {}
            if os.path.exists(campaigns_file):
                with open(campaigns_file, 'r') as f:
                    campaigns_info = json.load(f)
            
            # Analyser chaque slot
            active_campaigns = 0
            total_interactions = 0
            total_responses = 0
            
            for slot in range(12):  # Slots 0-11
                slot_dir = os.path.join(memory_dir, f'slot_{slot}')
                if os.path.exists(slot_dir):
                    slot_files = [f for f in os.listdir(slot_dir) if f.endswith('.json')]
                    
                    if slot_files:  # Slot actif
                        active_campaigns += 1
                        slot_interactions = 0
                        slot_responses = 0
                        slot_conversations = 0
                        
                        # R√©cup√©rer le nom de la campagne
                        campaign_name = campaigns_info.get(str(slot), {}).get('name', f'Campagne {slot}')
                        campaign_date = campaigns_info.get(str(slot), {}).get('date', 'Date inconnue')
                        campaign_targets = campaigns_info.get(str(slot), {}).get('targets', 0)
                        
                        print(f"\nüéØ SLOT {slot}: {campaign_name}")
                        print(f"   üìÖ Date: {campaign_date}")
                        print(f"   üéØ Cibles initiales: {campaign_targets}")
                        
                        # Analyser chaque profil
                        profiles_with_responses = []
                        
                        for file in slot_files:
                            try:
                                profile_pubkey = file.replace('.json', '')
                                with open(os.path.join(slot_dir, file), 'r') as f:
                                    history = json.load(f)
                                
                                profile_interactions = len(history)
                                profile_responses = sum(1 for interaction in history if interaction.get('response_received'))
                                
                                slot_interactions += profile_interactions
                                slot_responses += profile_responses
                                
                                if profile_responses > 0:
                                    slot_conversations += 1
                                    profiles_with_responses.append({
                                        'pubkey': profile_pubkey,
                                        'interactions': profile_interactions,
                                        'responses': profile_responses
                                    })
                                    
                            except Exception as e:
                                self.logger.error(f"Erreur lecture {file} : {e}")
                        
                        # Afficher les statistiques du slot
                        if slot_interactions > 0:
                            slot_response_rate = (slot_responses / slot_interactions) * 100
                            print(f"   üìä Interactions: {slot_interactions}")
                            print(f"   üí¨ R√©ponses: {slot_responses}")
                            print(f"   üìà Taux de r√©ponse: {slot_response_rate:.1f}%")
                            print(f"   üë• Conversations actives: {slot_conversations}")
                            
                            total_interactions += slot_interactions
                            total_responses += slot_responses
                            
                            # Afficher les profils avec r√©ponses
                            if profiles_with_responses:
                                print(f"   üìã Profils ayant r√©pondu:")
                                for profile in profiles_with_responses[:5]:  # Limiter √† 5
                                    print(f"      ‚Ä¢ {profile['pubkey'][:10]}... ({profile['responses']} r√©ponses)")
                                if len(profiles_with_responses) > 5:
                                    print(f"      ‚Ä¢ ... et {len(profiles_with_responses) - 5} autres")
                        else:
                            print(f"   ‚ö†Ô∏è Aucune interaction enregistr√©e")
            
            # R√©sum√© global
            print(f"\n" + "="*60)
            print(f"üìà R√âSUM√â GLOBAL")
            print(f"   üéØ Campagnes actives: {active_campaigns}")
            print(f"   üìä Total interactions: {total_interactions}")
            print(f"   üí¨ Total r√©ponses: {total_responses}")
            
            if total_interactions > 0:
                global_response_rate = (total_responses / total_interactions) * 100
                print(f"   üìà Taux de r√©ponse global: {global_response_rate:.1f}%")
            
            # Options de consultation d√©taill√©e
            print(f"\nüîç Options de consultation:")
            print(f"   1. Voir les d√©tails d'une campagne sp√©cifique")
            print(f"   2. Voir l'historique d'un profil sp√©cifique")
            print(f"   3. Retour")
            
            try:
                choice = input("\n> ")
                if choice == "1":
                    self._show_campaign_details()
                elif choice == "2":
                    self._show_profile_history()
            except KeyboardInterrupt:
                print("\nRetour...")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de l'affichage du statut : {e}")
            print(f"‚ùå Erreur : {e}")

    def _create_campaign_name(self, targets, message_template):
        """Cr√©e un nom automatique pour la campagne bas√© sur le contenu"""
        try:
            # Analyser les th√®mes des cibles
            themes = set()
            languages = set()
            countries = set()
            
            for target in targets:
                metadata = target.get('metadata', {})
                themes.update(metadata.get('tags', []))
                languages.add(metadata.get('language', 'fr'))
                countries.add(metadata.get('country', ''))
            
            # Cr√©er un nom descriptif
            theme_str = ', '.join(list(themes)[:3]) if themes else 'G√©n√©ral'
            lang_str = ', '.join(list(languages)[:2]) if languages else 'FR'
            country_str = ', '.join(list(countries)[:2]) if countries else 'International'
            
            # Analyser le message pour extraire le th√®me principal
            message_preview = message_template[:100].lower()
            if 'multipass' in message_preview:
                theme_str = 'MULTIPASS'
            elif 'opencollective' in message_preview or 'financement' in message_preview:
                theme_str = 'Financement'
            elif 'communaut√©' in message_preview or 'community' in message_preview:
                theme_str = 'Communaut√©'
            
            # G√©n√©rer le nom final
            campaign_name = f"{theme_str} - {lang_str} - {country_str}"
            
            return campaign_name
            
        except Exception as e:
            self.logger.error(f"Erreur lors de la cr√©ation du nom de campagne : {e}")
            return f"Campagne {datetime.now().strftime('%Y-%m-%d %H:%M')}"

    def _save_campaign_info(self, slot, targets, message_template):
        """Sauvegarde les informations de la campagne"""
        try:
            memory_dir = self.setup_memory_system()
            campaigns_file = os.path.join(memory_dir, 'campaigns.json')
            
            # Charger les campagnes existantes
            campaigns_info = {}
            if os.path.exists(campaigns_file):
                with open(campaigns_file, 'r') as f:
                    campaigns_info = json.load(f)
            
            # Cr√©er les informations de la nouvelle campagne
            campaign_name = self._create_campaign_name(targets, message_template)
            
            campaigns_info[str(slot)] = {
                'name': campaign_name,
                'date': datetime.now().isoformat(),
                'targets': len(targets),
                'message_preview': message_template[:200] + "..." if len(message_template) > 200 else message_template,
                'themes': list(set([tag for target in targets for tag in target.get('metadata', {}).get('tags', [])]))[:5],
                'languages': list(set([target.get('metadata', {}).get('language', 'fr') for target in targets])),
                'countries': list(set([target.get('metadata', {}).get('country', '') for target in targets if target.get('metadata', {}).get('country')]))
            }
            
            # Sauvegarder
            with open(campaigns_file, 'w') as f:
                json.dump(campaigns_info, f, indent=2, ensure_ascii=False)
            
            self.logger.info(f"‚úÖ Informations de campagne sauvegard√©es pour le slot {slot}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de la sauvegarde des infos campagne : {e}")

    def _find_available_slot(self):
        """Trouve un slot disponible pour une nouvelle campagne"""
        try:
            memory_dir = self.setup_memory_system()
            
            for slot in range(12):  # Slots 0-11
                slot_dir = os.path.join(memory_dir, f'slot_{slot}')
                
                # Si le r√©pertoire n'existe pas ou est vide, le slot est disponible
                if not os.path.exists(slot_dir) or not os.listdir(slot_dir):
                    return slot
            
            # Si tous les slots sont utilis√©s, retourner None
            return None
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de la recherche de slot : {e}")
            return 0  # Fallback vers le slot 0

    def _show_campaign_details(self):
        """Affiche les d√©tails d'une campagne sp√©cifique"""
        print("\nüîç D√âTAILS D'UNE CAMPAGNE")
        print("="*50)
        
        try:
            # Lister les campagnes disponibles
            memory_dir = self.setup_memory_system()
            campaigns_file = os.path.join(memory_dir, 'campaigns.json')
            
            if not os.path.exists(campaigns_file):
                print("‚ùå Aucune campagne enregistr√©e.")
                return
            
            with open(campaigns_file, 'r') as f:
                campaigns_info = json.load(f)
            
            if not campaigns_info:
                print("‚ùå Aucune campagne enregistr√©e.")
                return
            
            print("üìã Campagnes disponibles :")
            for slot, info in campaigns_info.items():
                print(f"   {slot}. {info['name']} ({info['date'][:10]})")
            
            slot_choice = input("\nNum√©ro du slot (ou Entr√©e pour annuler) : ")
            if not slot_choice.strip():
                return
            
            slot = slot_choice.strip()
            if slot not in campaigns_info:
                print("‚ùå Slot invalide.")
                return
            
            campaign = campaigns_info[slot]
            slot_dir = os.path.join(memory_dir, f'slot_{slot}')
            
            print(f"\nüéØ CAMPAGNE : {campaign['name']}")
            print("="*60)
            print(f"üìÖ Date : {campaign['date']}")
            print(f"üéØ Cibles initiales : {campaign['targets']}")
            print(f"üè∑Ô∏è Th√®mes : {', '.join(campaign['themes'])}")
            print(f"üåç Langues : {', '.join(campaign['languages'])}")
            print(f"üåé Pays : {', '.join(campaign['countries'])}")
            print(f"\nüí¨ Message : {campaign['message_preview']}")
            
            # Statistiques d√©taill√©es
            if os.path.exists(slot_dir):
                slot_files = [f for f in os.listdir(slot_dir) if f.endswith('.json')]
                
                if slot_files:
                    print(f"\nüìä STATISTIQUES D√âTAILL√âES")
                    print("-" * 40)
                    
                    total_interactions = 0
                    total_responses = 0
                    conversations = []
                    
                    for file in slot_files:
                        profile_pubkey = file.replace('.json', '')
                        with open(os.path.join(slot_dir, file), 'r') as f:
                            history = json.load(f)
                        
                        interactions = len(history)
                        responses = sum(1 for interaction in history if interaction.get('response_received'))
                        
                        total_interactions += interactions
                        total_responses += responses
                        
                        if responses > 0:
                            conversations.append({
                                'pubkey': profile_pubkey,
                                'interactions': interactions,
                                'responses': responses,
                                'last_response': next((interaction.get('timestamp') for interaction in reversed(history) if interaction.get('response_received')), 'N/A')
                            })
                    
                    print(f"üìä Total interactions : {total_interactions}")
                    print(f"üí¨ Total r√©ponses : {total_responses}")
                    if total_interactions > 0:
                        response_rate = (total_responses / total_interactions) * 100
                        print(f"üìà Taux de r√©ponse : {response_rate:.1f}%")
                    
                    if conversations:
                        print(f"\nüë• CONVERSATIONS ACTIVES ({len(conversations)})")
                        print("-" * 40)
                        for conv in sorted(conversations, key=lambda x: x['responses'], reverse=True):
                            print(f"   ‚Ä¢ {conv['pubkey'][:10]}... ({conv['responses']} r√©ponses, derni√®re: {conv['last_response'][:10]})")
                else:
                    print(f"\n‚ö†Ô∏è Aucune interaction enregistr√©e pour cette campagne.")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de l'affichage des d√©tails : {e}")
            print(f"‚ùå Erreur : {e}")

    def _show_profile_history(self):
        """Affiche l'historique d'un profil sp√©cifique"""
        print("\nüë§ HISTORIQUE D'UN PROFIL")
        print("="*50)
        
        try:
            pubkey = input("Cl√© publique du profil (ou Entr√©e pour annuler) : ")
            if not pubkey.strip():
                return
            
            pubkey = pubkey.strip()
            memory_dir = self.setup_memory_system()
            
            # Chercher dans tous les slots
            found_slots = []
            for slot in range(12):
                slot_dir = os.path.join(memory_dir, f'slot_{slot}')
                profile_file = os.path.join(slot_dir, f'{pubkey}.json')
                
                if os.path.exists(profile_file):
                    with open(profile_file, 'r') as f:
                        history = json.load(f)
                    found_slots.append((slot, history))
            
            if not found_slots:
                print(f"‚ùå Aucun historique trouv√© pour {pubkey[:10]}...")
                return
            
            print(f"\nüìã HISTORIQUE DE {pubkey[:10]}...")
            print("="*60)
            
            for slot, history in found_slots:
                print(f"\nüéØ SLOT {slot} ({len(history)} interactions)")
                print("-" * 40)
                
                for i, interaction in enumerate(history, 1):
                    print(f"\nüì® Interaction {i}:")
                    print(f"   üìÖ Date : {interaction['timestamp']}")
                    print(f"   üì§ Message envoy√© : {interaction['message_sent'][:100]}...")
                    
                    if interaction.get('response_received'):
                        print(f"   üì• R√©ponse re√ßue : {interaction['response_received'][:100]}...")
                    else:
                        print(f"   ‚è≥ En attente de r√©ponse...")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de l'affichage de l'historique : {e}")
            print(f"‚ùå Erreur : {e}")

    def execute_command(self, command, message_as_stdin=None):
        """
        Ex√©cute une commande syst√®me, avec la possibilit√© de passer un message
        via l'entr√©e standard pour plus de robustesse.
        Retourne True en cas de succ√®s, False en cas d'√©chec.
        """
        try:
            self.logger.debug(f"Ex√©cution de la commande : {' '.join(command)}")
            result = subprocess.run(
                command, 
                check=True, 
                text=True, 
                capture_output=True,
                input=message_as_stdin # Passer le message via stdin
            )
            self.logger.info(f"(R√âEL) Commande ex√©cut√©e avec succ√®s.")
            self.logger.debug(f"Sortie de la commande : {result.stdout}")
            return True
        except FileNotFoundError:
            self.logger.error(f"Commande non trouv√©e : {command[0]}", exc_info=True)
            return False
        except subprocess.CalledProcessError as e:
            self.logger.error(f"Erreur lors de l'ex√©cution de la commande. Sortie d'erreur :\n{e.stderr}", exc_info=True)
            return False

    def send_with_jaklis(self, targets, message_template, slot=0):
        jaklis_script = self.shared_state['config']['jaklis_script']
        cesium_node = self.shared_state['config']['cesium_node']

        # D√©terminer dynamiquement l'email du capitaine
        try:
            captain_email_file = os.path.expanduser("~/.zen/game/players/.current/.player")
            with open(captain_email_file, 'r') as f:
                captain_email = f.read().strip()
            if not captain_email: raise FileNotFoundError
        except (IOError, FileNotFoundError):
            self.logger.error(f"Impossible de lire l'email du capitaine depuis '{captain_email_file}'.")
            self.shared_state['status']['OperatorAgent'] = "√âchec : Email du capitaine introuvable."
            return

        secret_key_path = os.path.expanduser(f"~/.zen/game/nostr/{captain_email}/.secret.dunikey")
        if not os.path.exists(secret_key_path):
            self.logger.error(f"La cl√© secr√®te Dunikey n'a pas √©t√© trouv√©e pour {captain_email} √† l'emplacement : {secret_key_path}")
            self.shared_state['status']['OperatorAgent'] = "√âchec : Cl√© secr√®te introuvable."
            return

        opt_out_message = "\n\n---\nPour ne plus recevoir de messages, r√©pondez simplement 'STOP'."
        success = 0
        failures = 0

        self.logger.info(f"üöÄ D√©marrage de la campagne via Jaklis (authentifi√©)...")
        for i, target in enumerate(targets):
            uid = target.get('uid', 'N/A')
            pubkey = target.get('pubkey')

            if not pubkey:
                self.logger.warning(f"Cible {uid} ignor√©e (pas de cl√© publique).")
                failures += 1
                continue

            # Utiliser la m√©thode centralis√©e pour pr√©parer le message
            personalized_message = self._prepare_message(message_template, target)
            title = "Invitation UPlanet"
            
            self.logger.info(f"--- Envoi Jaklis {i+1}/{len(targets)} √† {uid} ---")
            
            # On passe le message par un fichier temporaire pour √©viter les probl√®mes avec les caract√®res sp√©ciaux
            with tempfile.NamedTemporaryFile(mode='w+', delete=True, suffix=".txt") as tmp_file:
                tmp_file.write(personalized_message)
                tmp_file.flush() # S'assurer que tout est √©crit sur le disque
                
                command = [
                    'python3', jaklis_script,
                    '-k', secret_key_path,
                    '-n', cesium_node,
                    'send',
                    '-d', pubkey,
                    '-t', title,
                    '-f', tmp_file.name
                ]
                
                if self.execute_command(command):
                    # Enregistrer l'interaction dans la m√©moire
                    self.record_interaction(pubkey, uid, personalized_message, slot=slot)
                    success += 1
                else:
                    failures += 1

            time.sleep(self.shared_state['config']['send_delay_seconds'])
        
        report = f"Campagne via Jaklis termin√©e. Succ√®s : {success}, √âchecs : {failures}."
        self.logger.info(f"==================================================\n‚úÖ {report}\n==================================================")
        self.shared_state['status']['OperatorAgent'] = report
    
    def send_with_mailjet(self, targets, message_template, slot=0):
        self.logger.info("üöÄ D√©marrage de la campagne via Mailjet...")
        self.shared_state['status']['OperatorAgent'] = "Envoi via Mailjet..."
        mailjet_script = self.shared_state['config']['mailjet_script']
        url_oc = self.shared_state['config']['URL_OPEN_COLLECTIVE']
        success, failure = 0, 0

        for i, target in enumerate(targets):
            email = target.get('email')
            if not email:
                self.logger.warning(f"Cible {target.get('uid', 'N/A')} ignor√©e (email manquant)."); failure+=1; continue

            personalized_message = message_template.replace('[URL_OPEN_COLLECTIVE]', url_oc)
            for key, value in target.items(): personalized_message = personalized_message.replace(f'[{key}]', str(value))

            self.logger.info(f"--- Envoi Mailjet {i+1}/{len(targets)} √† {email} ---")
            try:
                with tempfile.NamedTemporaryFile(mode='w+', delete=False, suffix=".txt", encoding='utf-8') as tmp:
                    tmp.write(personalized_message)
                    tmp_path = tmp.name

                command = ['bash', mailjet_script, email, tmp_path, "Votre invitation pour UPlanet"]
                self.logger.debug(f"Ex√©cution Mailjet : {' '.join(command)}")
                self.execute_command(command)
                success += 1

                os.remove(tmp_path)
            except Exception as e:
                self.logger.error(f"√âchec de l'envoi √† {email}: {e}", exc_info=True); failure+=1

            if i < len(targets) - 1: time.sleep(self.shared_state['config'].get('send_delay_seconds', 2))

        self.finalize_campaign("Mailjet", success, failure)

    def send_with_nostr(self, targets, message_template, slot=0):
        self.logger.info("üöÄ D√©marrage de la campagne via Nostr (DM)...")
        self.shared_state['status']['OperatorAgent'] = "Envoi via Nostr (DM)..."
        nostr_script = os.path.abspath(self.shared_state['config']['nostr_dm_script'])
        sender_nsec = self.shared_state['config'].get('uplanet_nsec')

        if not sender_nsec or sender_nsec == "nsec1...":
            self.logger.error("Configuration NSEC manquante ou non initialis√©e. L'envoi Nostr est impossible.")
            self.finalize_campaign("Nostr", 0, len(targets))
            return

        success, failure = 0, 0

        for i, target in enumerate(targets):
            email = target.get('email')
            if not email:
                self.logger.warning(f"Cible {target.get('uid', 'N/A')} ignor√©e (email manquant pour la d√©tection)."); failure+=1; continue

            # D√©tecter si le prospect a un MULTIPASS
            multipass_dir = os.path.expanduser(f"~/.zen/game/nostr/{email}")
            npub_file = os.path.join(multipass_dir, 'NPUB')

            if os.path.isdir(multipass_dir) and os.path.isfile(npub_file):
                with open(npub_file, 'r') as f:
                    recipient_npub = f.read().strip()

                self.logger.info(f"--- Envoi Nostr DM {i+1}/{len(targets)} √† {target.get('uid')} ({recipient_npub[:15]}...) ---")

                personalized_message = message_template.replace('[URL_OPEN_COLLECTIVE]', url_oc)
                for key, value in target.items(): personalized_message = personalized_message.replace(f'[{key}]', str(value))

                try:
                    command = ['python3', nostr_script, '-p', recipient_npub, '-m', personalized_message, '-s', sender_nsec]
                    self.logger.debug(f"Ex√©cution Nostr : {' '.join(command)}")
                    self.execute_command(command)
                    success += 1
                except Exception as e:
                    self.logger.error(f"√âchec de l'envoi Nostr √† {recipient_npub}: {e}", exc_info=True); failure+=1
            else:
                self.logger.warning(f"Cible {target.get('uid', 'N/A')} ignor√©e (pas de MULTIPASS d√©tect√©)."); failure+=1; continue

            if i < len(targets) - 1: time.sleep(self.shared_state['config'].get('send_delay_seconds', 2))

        self.finalize_campaign("Nostr", success, failure)

    def finalize_campaign(self, channel, success, failure):
        final_report = f"Campagne via {channel} termin√©e. Succ√®s : {success}, √âchecs : {failure}."
        self.logger.info("="*50)
        self.logger.info(f"‚úÖ {final_report}")
        self.logger.info("="*50)
        self.shared_state['status']['OperatorAgent'] = final_report 

    def setup_memory_system(self):
        """Configure le syst√®me de m√©moire pour l'op√©rateur"""
        memory_dir = os.path.join(self.shared_state['config']['workspace'], 'operator_memory')
        os.makedirs(memory_dir, exist_ok=True)
        
        # Cr√©er les 12 slots de m√©moire (0-11)
        for slot in range(12):
            slot_dir = os.path.join(memory_dir, f'slot_{slot}')
            os.makedirs(slot_dir, exist_ok=True)
        
        return memory_dir

    def record_interaction(self, target_pubkey, target_uid, message_sent, response_received=None, slot=0):
        """Enregistre une interaction dans la m√©moire de l'op√©rateur"""
        memory_dir = self.setup_memory_system()
        slot_dir = os.path.join(memory_dir, f'slot_{slot}')
        
        interaction_file = os.path.join(slot_dir, f'{target_pubkey}.json')
        
        interaction_data = {
            'target_pubkey': target_pubkey,
            'target_uid': target_uid,
            'message_sent': message_sent,
            'response_received': response_received,
            'timestamp': datetime.utcnow().isoformat() + 'Z',
            'slot': slot
        }
        
        # Charger les interactions existantes ou cr√©er un nouveau fichier
        if os.path.exists(interaction_file):
            with open(interaction_file, 'r', encoding='utf-8') as f:
                interactions = json.load(f)
        else:
            interactions = []
        
        interactions.append(interaction_data)
        
        # Garder seulement les 50 derni√®res interactions
        interactions = interactions[-50:]
        
        with open(interaction_file, 'w', encoding='utf-8') as f:
            json.dump(interactions, f, indent=2, ensure_ascii=False)
        
        self.logger.info(f"üìù Interaction enregistr√©e pour {target_uid} (slot {slot})")

    def get_interaction_history(self, target_pubkey, slot=0):
        """R√©cup√®re l'historique des interactions avec une cible"""
        memory_dir = self.setup_memory_system()
        slot_dir = os.path.join(memory_dir, f'slot_{slot}')
        interaction_file = os.path.join(slot_dir, f'{target_pubkey}.json')
        
        if os.path.exists(interaction_file):
            with open(interaction_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        return []

    def generate_follow_up_response(self, target_pubkey, target_uid, incoming_message, slot=0):
        """G√©n√®re une r√©ponse de suivi bas√©e sur l'historique des interactions et enrichie par Perplexica"""
        # R√©cup√©rer l'historique
        history = self.get_interaction_history(target_pubkey, slot)
        
        if not history:
            return "D√©sol√©, je n'ai pas d'historique d'interaction avec vous."
        
        # R√©cup√©rer les informations du prospect depuis la base de connaissance
        prospect_info = self._get_prospect_info(target_pubkey)
        
        # Enrichir avec Perplexica si le message contient des questions ou des r√©f√©rences
        perplexica_context = ""
        if self._should_use_perplexica(incoming_message):
            self.logger.info(f"üîç Utilisation de Perplexica pour enrichir la r√©ponse √† {target_uid}")
            perplexica_context = self._call_perplexica_for_response(incoming_message, prospect_info)
        
        # S√©lectionner la banque de m√©moire appropri√©e
        selected_bank = self._select_bank_for_response(prospect_info, incoming_message)
        
        # Construire le contexte enrichi pour l'IA
        context = f"""Tu es l'Agent Strat√®ge d'UPlanet, sp√©cialis√© dans les r√©ponses aux conversations.

INFORMATIONS DU PROSPECT :
- UID : {target_uid}
- Langue : {prospect_info.get('language', 'fr')}
- Th√®mes d'int√©r√™t : {', '.join(prospect_info.get('tags', []))}
- Description : {prospect_info.get('description', 'Non disponible')}

BANQUE DE M√âMOIRE S√âLECTIONN√âE :
- Nom : {selected_bank.get('name', 'Par d√©faut')}
- Arch√©type : {selected_bank.get('archetype', 'Non d√©fini')}
- Ton : {selected_bank.get('corpus', {}).get('tone', 'Professionnel')}

HISTORIQUE DES INTERACTIONS :
"""
        for interaction in history[-3:]:  # Derni√®res 3 interactions
            context += f"- Message envoy√© : {interaction['message_sent']}\n"
            if interaction.get('response_received'):
                context += f"- R√©ponse re√ßue : {interaction['response_received']}\n"
            context += f"- Date : {interaction['timestamp']}\n\n"
        
        context += f"MESSAGE RE√áU MAINTENANT : {incoming_message}\n\n"
        
        if perplexica_context:
            context += f"CONTEXTE ENRICHIT PAR PERPLEXICA : {perplexica_context}\n\n"
        
        context += """INSTRUCTIONS POUR LA R√âPONSE :
1. Reconnais le contexte de la conversation et le profil du prospect
2. R√©ponds de mani√®re personnalis√©e et engageante
3. Utilise le ton et le vocabulaire de la banque de m√©moire s√©lectionn√©e
4. Guide subtilement vers les objectifs d'UPlanet (OpenCollective, MULTIPASS, etc.)
5. Reste authentique et professionnel
6. Si le prospect pose des questions techniques, utilise le contexte Perplexica
7. Limite la r√©ponse √† 2-3 phrases maximum

G√©n√®re une r√©ponse appropri√©e :"""
        
        try:
            result = subprocess.run(
                ['python3', self.shared_state['config']['question_script'], context, '--json'],
                capture_output=True, text=True, check=True
            )
            response = json.loads(result.stdout)
            return response.get('answer', 'Erreur lors de la g√©n√©ration de la r√©ponse')
        except Exception as e:
            self.logger.error(f"Erreur lors de la g√©n√©ration de r√©ponse de suivi : {e}")
            return f"Erreur lors de la g√©n√©ration de la r√©ponse : {e}"

    def process_incoming_response(self, target_pubkey, target_uid, incoming_message, slot=0):
        """Traite une r√©ponse re√ßue et g√©n√®re une r√©ponse automatique si n√©cessaire"""
        self.logger.info(f"üì® R√©ponse re√ßue de {target_uid} : {incoming_message[:100]}...")
        
        # Enregistrer la r√©ponse re√ßue
        history = self.get_interaction_history(target_pubkey, slot)
        if history:
            # Mettre √† jour la derni√®re interaction
            last_interaction = history[-1]
            last_interaction['response_received'] = incoming_message
            
            # Sauvegarder la mise √† jour
            memory_dir = self.setup_memory_system()
            slot_dir = os.path.join(memory_dir, f'slot_{slot}')
            interaction_file = os.path.join(slot_dir, f'{target_pubkey}.json')
            
            with open(interaction_file, 'w', encoding='utf-8') as f:
                json.dump(history, f, indent=2, ensure_ascii=False)
        
        # Analyser le contenu de la r√©ponse
        if self._should_auto_respond(incoming_message):
            self.logger.info(f"ü§ñ G√©n√©ration d'une r√©ponse automatique pour {target_uid}")
            auto_response = self.generate_follow_up_response(target_pubkey, target_uid, incoming_message, slot)
            
            # Envoyer la r√©ponse automatique
            self._send_auto_response(target_pubkey, auto_response, slot)
            
            return auto_response
        else:
            self.logger.info(f"‚ö†Ô∏è R√©ponse de {target_uid} n√©cessite une intervention manuelle")
            return None

    def _should_auto_respond(self, message):
        """D√©termine si une r√©ponse automatique est appropri√©e en utilisant l'IA"""
        try:
            # Construire le prompt d'analyse
            analysis_prompt = f"""Analyse cette r√©ponse re√ßue dans le contexte d'une campagne UPlanet et d√©termine si elle n√©cessite une r√©ponse automatique.

MESSAGE RE√áU : "{message}"

CONTEXTE : Ce message est une r√©ponse √† une campagne UPlanet qui pr√©sente le projet et invite √† rejoindre l'aventure.

CRIT√àRES D'ANALYSE :
1. POSITIF (r√©ponse automatique) : 
   - Int√©r√™t exprim√© (oui, √ßa m'int√©resse, comment faire, etc.)
   - Questions sur le projet, le processus, les √©tapes
   - Demande d'informations suppl√©mentaires
   - Enthousiasme ou curiosit√©
   - Volont√© de participer ou rejoindre

2. N√âGATIF (intervention manuelle) :
   - Refus explicite (non, pas int√©ress√©, stop, etc.)
   - Plaintes ou critiques
   - Demande de d√©sinscription
   - Messages hostiles ou agressifs

3. NEUTRE/AMBIGU (intervention manuelle) :
   - Messages trop courts ou vagues
   - R√©ponses non claires
   - Messages qui ne semblent pas li√©s au projet

INSTRUCTIONS :
- Analyse le ton, l'intention et le contenu du message
- D√©termine si le prospect montre de l'int√©r√™t ou non
- R√©ponds UNIQUEMENT par "POSITIF", "N√âGATIF" ou "NEUTRE"

ANALYSE :"""

            # Appeler question.py pour l'analyse
            question_script = self.shared_state['config']['question_script']
            command = ['python3', question_script, analysis_prompt]
            
            self.logger.debug(f"üîç Analyse IA de la r√©ponse : {message[:50]}...")
            result = subprocess.run(command, capture_output=True, text=True, check=True)
            analysis_result = result.stdout.strip()
            
            self.logger.debug(f"üîç R√©sultat de l'analyse IA : {analysis_result}")
            
            # Parser la r√©ponse
            if "POSITIF" in analysis_result.upper():
                self.logger.info(f"‚úÖ Analyse IA : R√©ponse positive d√©tect√©e")
                return True
            elif "N√âGATIF" in analysis_result.upper():
                self.logger.info(f"‚ùå Analyse IA : R√©ponse n√©gative d√©tect√©e")
                return False
            else:
                self.logger.info(f"‚ö†Ô∏è Analyse IA : R√©ponse neutre/ambigu√´ d√©tect√©e")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de l'analyse IA : {e}")
            # En cas d'erreur, utiliser une logique de fallback simple
            message_lower = message.lower()
            
            # Mots-cl√©s de fallback pour les cas d'urgence
            positive_fallback = ['oui', 'yes', 'int√©ress√©', 'int√©ressant', 'comment', 'o√π', 'quand', 'combien', '?']
            negative_fallback = ['non', 'no', 'stop', 'arr√™ter', 'pas int√©ress√©', 'not interested']
            
            for keyword in negative_fallback:
                if keyword in message_lower:
                    return False
            
            for keyword in positive_fallback:
                if keyword in message_lower:
                    return True
            
            # Par d√©faut, intervention manuelle si ambigu
            return False

    def _send_auto_response(self, target_pubkey, response, slot=0):
        """Envoie une r√©ponse automatique via le canal appropri√©"""
        # Utiliser le m√™me canal que l'interaction initiale
        # Pour l'instant, on utilise Jaklis par d√©faut
        try:
            # Cr√©er un fichier temporaire pour le message
            with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False) as f:
                f.write(response)
                temp_file = f.name
            
            # Envoyer via Jaklis
            captain_email = os.environ.get('CAPTAINEMAIL')
            if not captain_email:
                self.logger.error("CAPTAINEMAIL non d√©fini")
                return False
            
            cesium_node = self.shared_state['config']['cesium_node']
            
            cmd = [
                'python3', self.shared_state['config']['jaklis_script'],
                '-k', captain_email,
                '-n', cesium_node,
                '-p', target_pubkey,
                '-f', temp_file
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, check=True)
            
            # Nettoyer le fichier temporaire
            os.unlink(temp_file)
            
            self.logger.info(f"‚úÖ R√©ponse automatique envoy√©e √† {target_pubkey}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de l'envoi de la r√©ponse automatique : {e}")
            return False

    def list_campaign_slots(self):
        """Liste tous les slots avec leurs informations de campagne"""
        print("\nüìä SLOTS DE CAMPAGNES DISPONIBLES")
        print("=" * 60)
        
        # Charger les informations de campagne
        campaigns_file = os.path.join(self.shared_state['config']['workspace'], 'campaigns.json')
        campaigns = {}
        if os.path.exists(campaigns_file):
            try:
                with open(campaigns_file, 'r') as f:
                    campaigns = json.load(f)
            except Exception as e:
                self.logger.error(f"Erreur lors du chargement des campagnes : {e}")
        
        # V√©rifier chaque slot
        active_slots = []
        for slot in range(12):
            slot_dir = os.path.join(self.setup_memory_system(), f'slot_{slot}')
            campaign_info = campaigns.get(str(slot), {})
            
            if os.path.exists(slot_dir):
                # Compter les interactions dans ce slot
                files = [f for f in os.listdir(slot_dir) if f.endswith('.json')]
                if files:
                    # Calculer les statistiques
                    total_interactions = 0
                    total_responses = 0
                    last_interaction = None
                    
                    for file in files:
                        pubkey = file.replace('.json', '')
                        history = self.get_interaction_history(pubkey, slot)
                        if history:
                            total_interactions += len(history)
                            responses = sum(1 for h in history if h.get('response_received'))
                            total_responses += responses
                            
                            if not last_interaction or history[-1]['timestamp'] > last_interaction:
                                last_interaction = history[-1]['timestamp']
                    
                    # Calculer le taux de r√©ponse
                    response_rate = (total_responses / total_interactions * 100) if total_interactions > 0 else 0
                    
                    # Informations de campagne
                    campaign_name = campaign_info.get('name', f'Campagne {slot}')
                    campaign_date = campaign_info.get('date', 'Date inconnue')
                    target_count = campaign_info.get('target_count', len(files))
                    
                    active_slots.append({
                        'slot': slot,
                        'name': campaign_name,
                        'date': campaign_date,
                        'targets': target_count,
                        'interactions': total_interactions,
                        'responses': total_responses,
                        'response_rate': response_rate,
                        'last_interaction': last_interaction
                    })
        
        if not active_slots:
            print("‚ùå Aucune campagne active trouv√©e")
            return None
        
        # Afficher les slots actifs
        for i, slot_info in enumerate(active_slots, 1):
            print(f"\n{i}. Slot {slot_info['slot']} : {slot_info['name']}")
            print(f"   üìÖ Date : {slot_info['date']}")
            print(f"   üéØ Cibles : {slot_info['targets']}")
            print(f"   üí¨ Interactions : {slot_info['interactions']}")
            print(f"   üì® R√©ponses : {slot_info['responses']} ({slot_info['response_rate']:.1f}%)")
            if slot_info['last_interaction']:
                print(f"   ‚è∞ Derni√®re activit√© : {slot_info['last_interaction']}")
        
        return active_slots

    def view_interaction_history(self, target_pubkey=None, slot=0):
        """Affiche l'historique des interactions avec une interface am√©lior√©e"""
        if target_pubkey is None and slot == 0:
            # Afficher d'abord la liste des slots
            active_slots = self.list_campaign_slots()
            if not active_slots:
                return
            
            try:
                choice = input(f"\nChoisissez un slot (1-{len(active_slots)}) ou Entr√©e pour annuler : ").strip()
                if not choice:
                    return
                
                slot_index = int(choice) - 1
                if 0 <= slot_index < len(active_slots):
                    slot = active_slots[slot_index]['slot']
                else:
                    print("‚ùå Choix invalide")
                    return
            except ValueError:
                print("‚ùå Entr√©e invalide")
                return
        
        memory_dir = self.setup_memory_system()
        slot_dir = os.path.join(memory_dir, f'slot_{slot}')
        
        if target_pubkey:
            # Afficher l'historique d'une cible sp√©cifique
            history = self.get_interaction_history(target_pubkey, slot)
            if history:
                print(f"\nüìö Historique des interactions avec {history[0]['target_uid']} (slot {slot})")
                print("=" * 60)
                for i, interaction in enumerate(history[-10:], 1):  # Derni√®res 10 interactions
                    print(f"\n{i}. {interaction['timestamp']}")
                    print(f"   Message envoy√© : {interaction['message_sent'][:100]}...")
                    if interaction.get('response_received'):
                        print(f"   R√©ponse re√ßue : {interaction['response_received'][:100]}...")
                    else:
                        print("   R√©ponse re√ßue : Aucune")
            else:
                print(f"‚ùå Aucun historique trouv√© pour {target_pubkey}")
        else:
            # Afficher un r√©sum√© de toutes les interactions du slot
            print(f"\nüìö R√©sum√© des interactions (slot {slot})")
            print("=" * 60)
            
            if os.path.exists(slot_dir):
                files = [f for f in os.listdir(slot_dir) if f.endswith('.json')]
                if files:
                    for file in files:
                        pubkey = file.replace('.json', '')
                        history = self.get_interaction_history(pubkey, slot)
                        if history:
                            last_interaction = history[-1]
                            print(f"\n{last_interaction['target_uid']} ({pubkey[:10]}...)")
                            print(f"   Derni√®re interaction : {last_interaction['timestamp']}")
                            print(f"   Total interactions : {len(history)}")
                else:
                    print("‚ùå Aucune interaction trouv√©e dans ce slot")
            else:
                print("‚ùå Slot non trouv√©")

    def _get_prospect_info(self, target_pubkey):
        """R√©cup√®re les informations du prospect depuis la base de connaissance"""
        try:
            kb_file = self.shared_state['config']['enriched_prospects_file']
            if os.path.exists(kb_file):
                with open(kb_file, 'r') as f:
                    knowledge_base = json.load(f)
                
                if target_pubkey in knowledge_base:
                    profile_data = knowledge_base[target_pubkey]
                    metadata = profile_data.get('metadata', {})
                    profile = profile_data.get('profile', {})
                    
                    return {
                        'language': metadata.get('language', 'fr'),
                        'tags': metadata.get('tags', []),
                        'description': profile.get('_source', {}).get('description', ''),
                        'country': metadata.get('country', ''),
                        'region': metadata.get('region', '')
                    }
        except Exception as e:
            self.logger.error(f"Erreur lors de la r√©cup√©ration des infos prospect : {e}")
        
        return {'language': 'fr', 'tags': [], 'description': ''}

    def _should_use_perplexica(self, message):
        """D√©termine si Perplexica doit √™tre utilis√© pour enrichir la r√©ponse"""
        message_lower = message.lower()
        
        # Mots-cl√©s qui indiquent des questions techniques ou des r√©f√©rences
        technical_keywords = [
            'comment', 'comment faire', 'o√π', 'quand', 'combien', 'prix', 'co√ªt',
            'technique', 'technologie', 'blockchain', 'crypto', 'nostr', 'ipfs',
            'multipass', 'g1', 'monnaie libre', 'd√©centralis√©', 's√©curit√©',
            'installation', 'configuration', 'documentation', 'github',
            'opencollective', 'financement', 'participer', 'rejoindre'
        ]
        
        # V√©rifier si le message contient des mots-cl√©s techniques
        for keyword in technical_keywords:
            if keyword in message_lower:
                return True
        
        # V√©rifier si le message contient des questions
        if any(char in message for char in ['?', 'comment', 'o√π', 'quand', 'combien']):
            return True
        
        return False

    def _call_perplexica_for_response(self, message, prospect_info):
        """Appelle Perplexica pour enrichir le contexte de la r√©ponse"""
        try:
            # Construire une requ√™te contextuelle
            query = f"""Analyse cette question/r√©ponse dans le contexte d'UPlanet et du prospect :

Prospect : {prospect_info.get('description', 'Non disponible')}
Th√®mes d'int√©r√™t : {', '.join(prospect_info.get('tags', []))}
Message re√ßu : {message}

Fournis des informations pertinentes pour r√©pondre de mani√®re appropri√©e, en te concentrant sur :
- Les aspects techniques d'UPlanet si demand√©
- Les informations sur MULTIPASS, G1, blockchain
- Les liens vers la documentation ou les ressources
- Les aspects communautaires et participatifs

R√©ponse concise et cibl√©e :"""
            
            # Appeler Perplexica
            perplexica_script = self.shared_state['config']['perplexica_script_search']
            result = subprocess.run(
                [perplexica_script, query],
                capture_output=True, text=True, check=True
            )
            
            return result.stdout.strip()
            
        except Exception as e:
            self.logger.error(f"Erreur lors de l'appel Perplexica : {e}")
            return ""

    def _select_bank_for_response(self, prospect_info, message):
        """S√©lectionne la banque de m√©moire appropri√©e pour la r√©ponse"""
        try:
            # Charger la configuration des banques
            banks_config_file = os.path.join(self.shared_state['config']['workspace'], 'memory_banks_config.json')
            if os.path.exists(banks_config_file):
                with open(banks_config_file, 'r') as f:
                    banks_config = json.load(f)
                
                # Analyser les th√®mes du prospect
                prospect_tags = set(prospect_info.get('tags', []))
                message_lower = message.lower()
                
                # Trouver la meilleure correspondance
                best_bank = None
                best_score = 0
                
                for slot, bank in banks_config.get('banks', {}).items():
                    if not bank.get('corpus'):
                        continue
                    
                    bank_themes = set(bank.get('themes', []))
                    
                    # Score bas√© sur la correspondance des th√®mes
                    theme_score = len(prospect_tags.intersection(bank_themes))
                    
                    # Bonus pour les mots-cl√©s dans le message
                    bank_vocabulary = bank.get('corpus', {}).get('vocabulary', [])
                    keyword_score = sum(1 for word in bank_vocabulary if word.lower() in message_lower)
                    
                    total_score = theme_score + (keyword_score * 0.5)
                    
                    if total_score > best_score:
                        best_score = total_score
                        best_bank = bank
                
                if best_bank:
                    return best_bank
                
                # Fallback vers la premi√®re banque disponible
                for slot, bank in banks_config.get('banks', {}).items():
                    if bank.get('corpus'):
                        return bank
                        
        except Exception as e:
            self.logger.error(f"Erreur lors de la s√©lection de banque : {e}")
        
        # Banque par d√©faut
        return {
            'name': 'R√©ponse par d√©faut',
            'archetype': 'Professionnel',
            'corpus': {'tone': 'Professionnel et engageant'}
        } 