from .base_agent import Agent
import json
import os
import subprocess
import re

class StrategistAgent(Agent):
    """
    L'agent Strat√®ge utilise l'intelligence artificielle pour r√©diger
    un message de campagne personnalis√© en fonction de la cible fournie par l'Analyste.
    Il peut utiliser Perplexica pour enrichir son contexte.
    """
    def _select_bank_for_targets(self, targets, banks_config):
        """S√©lectionne automatiquement la banque de m√©moire la plus appropri√©e pour les cibles"""
        if not targets or not banks_config.get('banks'):
            return None

        # Analyser les th√®mes des cibles
        target_themes = set()
        for target in targets:
            # Extraire les th√®mes du profil si disponibles
            if 'metadata' in target and 'tags' in target['metadata']:
                tags = target['metadata']['tags']
                if isinstance(tags, list) and tags != ['error']:
                    target_themes.update(tags)

        if not target_themes:
            self.logger.info("Aucun th√®me d√©tect√© dans les cibles, utilisation de la m√©thode classique")
            return None

        # Calculer le score de correspondance pour chaque banque
        bank_scores = {}
        for slot, bank in banks_config['banks'].items():
            if not bank.get('corpus'):
                continue  # Ignorer les banques sans corpus

            bank_themes = set(bank.get('themes', []))
            if not bank_themes:
                continue

            # Calculer l'intersection
            intersection = target_themes.intersection(bank_themes)
            if intersection:
                # Score bas√© sur le nombre de th√®mes correspondants
                score = len(intersection) / len(bank_themes)
                bank_scores[slot] = {
                    'score': score,
                    'bank': bank,
                    'matching_themes': list(intersection)
                }

        if not bank_scores:
            self.logger.info("Aucune banque de m√©moire ne correspond aux th√®mes des cibles")
            return None

        # S√©lectionner la banque avec le meilleur score
        best_slot = max(bank_scores.keys(), key=lambda x: bank_scores[x]['score'])
        best_match = bank_scores[best_slot]

        self.logger.info(f"Banque s√©lectionn√©e : {best_match['bank']['name']} (score: {best_match['score']:.2f})")
        self.logger.info(f"Th√®mes correspondants : {', '.join(best_match['matching_themes'])}")

        return best_match['bank']

    def _choose_strategy_mode(self):
        """Permet de choisir le mode de r√©daction du message"""
        print("\nüéØ MODE DE R√âDACTION DU MESSAGE")
        print("-" * 40)
        print("1. Mode Persona : Analyse automatique du profil et s√©lection de banque")
        print("2. Mode Auto : S√©lection automatique bas√©e sur les th√®mes")
        print("3. Mode Classique : Choix manuel de la banque")
        print()
        
        try:
            choice = input("Choisissez le mode (1-3) : ").strip()
            
            if choice == "1":
                print("‚úÖ Mode Persona s√©lectionn√©")
                return "persona"
            elif choice == "2":
                print("‚úÖ Mode Auto s√©lectionn√©")
                return "auto"
            elif choice == "3":
                print("‚úÖ Mode Classique s√©lectionn√©")
                return "classic"
            else:
                print("‚ùå Choix invalide, utilisation du mode Auto")
                return "auto"
                
        except (ValueError, KeyboardInterrupt):
            print("‚ùå Choix invalide, utilisation du mode Auto")
            return "auto"

    def run(self):
        """Lance la phase de r√©daction du message de campagne"""
        self.logger.info("ü§ñ Agent Strat√®ge : D√©marrage de la r√©daction du message...")
        self.shared_state['status']['StrategistAgent'] = "R√©daction en cours..."

        # V√©rifier si l'analyse a √©t√© faite
        if not self.shared_state.get('targets'):
            self.logger.error("Aucune cible n'a √©t√© d√©finie. Lancez l'Agent Analyste d'abord.")
            self.shared_state['status']['StrategistAgent'] = "√âchec : Cibles manquantes."
            return

        # V√©rifier si le portefeuille Tr√©sor est configur√©
        treasury_pubkey = self.shared_state['config'].get('uplanet_treasury_g1pub')
        if not treasury_pubkey:
            self.logger.error("La cl√© publique du Tr√©sor UPlanet n'est pas configur√©e. Impossible de continuer.")
            self.shared_state['status']['StrategistAgent'] = "√âchec : Cl√© du Tr√©sor manquante."
            return

        # V√©rification des API n√©cessaires au d√©but
        if not self._check_ollama_once() or not self._check_perplexica_once():
            self.shared_state['status']['StrategistAgent'] = "√âchec : Une API requise est indisponible."
            return

        # Charger la configuration des banques de m√©moire
        banks_config_file = os.path.join(self.shared_state['config']['workspace'], 'memory_banks_config.json')
        banks_config = self._load_banks_config(banks_config_file)

        # Choisir le mode de r√©daction
        mode = self._choose_strategy_mode()
        
        if mode == "persona":
            # Mode Persona : Analyse automatique du profil et s√©lection de banque
            selected_bank = self._analyze_profile_and_select_bank(self.shared_state['targets'], banks_config)
            if selected_bank:
                self.logger.info(f"üé≠ Mode Persona : Banque s√©lectionn√©e automatiquement : {selected_bank['name']}")
                self._generate_message_with_persona_mode(selected_bank, treasury_pubkey)
            else:
                self.logger.warning("‚ö†Ô∏è Mode Persona : Aucune banque adapt√©e trouv√©e, passage en mode classique")
                self._generate_message_with_classic_mode(banks_config, treasury_pubkey)
        elif mode == "auto":
            # Mode Auto : Utilisation de la logique existante
            selected_bank = self._select_bank_for_targets(self.shared_state['targets'], banks_config)
            if selected_bank:
                self.logger.info(f"üé≠ Mode Auto : Banque s√©lectionn√©e : {selected_bank['name']}")
                self._generate_message_with_bank_mode(selected_bank)
            else:
                self.logger.info("üìù Mode Auto : Aucune banque adapt√©e, passage en mode classique")
                self._generate_message_with_classic_mode(banks_config, treasury_pubkey)
        else:
            # Mode Classique : Choix manuel
            self.logger.info("üìù Mode Classique : Choix manuel de la banque")
            self._generate_message_with_classic_mode(banks_config, treasury_pubkey)

        if not message_content:
            self.logger.error("L'IA n'a retourn√© aucun message.")
            self.shared_state['status']['StrategistAgent'] = "√âchec : Aucun message g√©n√©r√©."
            return

        # Sauvegarder le message
        message_file = os.path.join(self.shared_state['config']['workspace'], "message_to_send.txt")
        with open(message_file, 'w') as f:
            f.write(message_content)

        report = "Message de campagne r√©dig√© et sauvegard√© dans workspace/message_to_send.txt. Pr√™t pour validation par l'Op√©rateur."
        self.logger.info(f"‚úÖ {report}")
        self.shared_state['status']['StrategistAgent'] = report
        self.shared_state['message_to_send'] = message_content

    def _check_ollama_once(self):
        """V√©rifie une seule fois que l'API Ollama est disponible."""
        if not getattr(self, '_ollama_checked', False):
            ollama_script = self.shared_state['config']['ollama_script']
            self.logger.info("V√©rification de l'API Ollama...")
            self.logger.debug(f"Ex√©cution du script Ollama : {' '.join(ollama_script)}")
            subprocess.run(ollama_script, check=True, capture_output=True)
            self.logger.info("‚úÖ Ollama API v√©rifi√©e.")
            setattr(self, '_ollama_checked', True)
        return getattr(self, '_ollama_checked', False)

    def _check_perplexica_once(self):
        """V√©rifie une seule fois que l'API Perplexica est disponible."""
        if not getattr(self, '_perplexica_checked', False):
            perplexica_connector = self.shared_state['config']['perplexica_script_connector']
            perplexica_search = self.shared_state['config']['perplexica_script_search']
            self.logger.info("V√©rification de la connexion √† Perplexica...")
            self.logger.debug(f"Ex√©cution du connecteur Perplexica : {' '.join(perplexica_connector)}")
            subprocess.run(perplexica_connector, check=True, capture_output=True)
            self.logger.info("‚úÖ Perplexica API v√©rifi√©e.")
            setattr(self, '_perplexica_checked', True)
        return getattr(self, '_perplexica_checked', False)

    def _call_perplexica(self, query):
        perplexica_search = self.shared_state['config']['perplexica_script_search']
        self.logger.info(f"Recherche web assist√©e sur : \"{query}\"")
        self.logger.debug(f"Ex√©cution de la recherche Perplexica : {perplexica_search} \"{query}\"")
        result = subprocess.run([perplexica_search, query], capture_output=True, text=True, check=True)
        self.logger.debug(f"R√©ponse brute de Perplexica : {result.stdout.strip()}")
        return result.stdout

    def _call_ia_for_writing(self, final_prompt):
        question_script = self.shared_state['config']['question_script']
        command = ['python3', question_script, final_prompt]
        self.logger.info("G√©n√©ration du message par l'IA...")
        self.logger.debug(f"Ex√©cution de la commande de r√©daction : {' '.join(command[:2])}...")
        result = subprocess.run(command, capture_output=True, text=True, check=True)
        self.logger.debug(f"R√©ponse brute de l'IA (r√©daction) : {result.stdout.strip()}")
        return result.stdout

    def manage_memory_banks(self):
        """Interface de gestion des banques de m√©moire th√©matiques"""
        self.logger.info("üè¶ Gestionnaire de Banques de M√©moire Th√©matiques")

        # Charger la configuration des banques
        banks_config_file = os.path.join(self.shared_state['config']['workspace'], 'memory_banks_config.json')
        banks_config = self._load_banks_config(banks_config_file)

        try:
            while True:
                print("\n" + "="*60)
                print("üè¶ GESTIONNAIRE DE BANQUES DE M√âMOIRE")
                print("="*60)
                print("Chaque banque repr√©sente une 'personnalit√©' pour l'Agent Strat√®ge")
                print()

                # Afficher l'√©tat des banques
                self._display_banks_status(banks_config)

                print("\nOptions :")
                print("1. Cr√©er/Configurer une banque")
                print("2. Associer des th√®mes √† une banque")
                print("3. Remplir le corpus d'une banque")
                print("4. Tester une banque (g√©n√©rer un message)")
                print("5. Configurer les liens")
                print("6. Synchroniser les th√®mes depuis l'Agent Analyste")
                print("7. Sauvegarder et retourner")
                print("8. Retour sans sauvegarder")
                print("9. Sauvegarder maintenant (sans quitter)")

                choice = input("\nVotre choix : ").strip()

                if choice == "1":
                    banks_config = self._configure_bank(banks_config)
                elif choice == "2":
                    banks_config = self._associate_themes_to_bank(banks_config)
                elif choice == "3":
                    banks_config = self._fill_bank_corpus(banks_config)
                elif choice == "4":
                    self._test_bank_message(banks_config)
                elif choice == "5":
                    self.shared_state['config'] = self._configure_links(self.shared_state['config'])
                elif choice == "6":
                    banks_config = self._sync_themes_from_analyst(banks_config)
                elif choice == "7":
                    self._save_banks_config(banks_config, banks_config_file)
                    self.logger.info("‚úÖ Configuration des banques sauvegard√©e")
                    break
                elif choice == "8":
                    print("‚ö†Ô∏è Attention : Les modifications non sauvegard√©es seront perdues.")
                    confirm = input("√ätes-vous s√ªr ? (oui/non) : ").strip().lower()
                    if confirm in ['oui', 'o', 'yes', 'y']:
                        break
                    else:
                        print("Retour au menu principal...")
                elif choice == "9":
                    self._save_banks_config(banks_config, banks_config_file)
                    self.logger.info("‚úÖ Configuration sauvegard√©e")
                else:
                    print("‚ùå Choix invalide")

        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è Gestionnaire interrompu par l'utilisateur.")
            print("üíæ Sauvegarde automatique des modifications...")
            self._save_banks_config(banks_config, banks_config_file)
            self.logger.info("‚úÖ Configuration sauvegard√©e automatiquement")
        except Exception as e:
            print(f"\n‚ùå Erreur dans le gestionnaire : {e}")
            print("üíæ Tentative de sauvegarde des modifications...")
            try:
                self._save_banks_config(banks_config, banks_config_file)
                self.logger.info("‚úÖ Configuration sauvegard√©e malgr√© l'erreur")
            except:
                self.logger.error("‚ùå Impossible de sauvegarder la configuration")

    def _load_banks_config(self, config_file):
        """Charge la configuration des banques de m√©moire"""
        if os.path.exists(config_file):
            try:
                with open(config_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                self.logger.error(f"Erreur lors du chargement de la config : {e}")

        # Configuration par d√©faut avec les 4 arch√©types
        return {
            "banks": {
                "0": {
                    "name": "Ing√©nieur/Technicien",
                    "description": "Voix experte et pragmatique qui s'adresse √† des pairs. Met l'accent sur la robustesse du protocole, la d√©centralisation r√©elle et le code open-source.",
                    "archetype": "Le B√¢tisseur",
                    "themes": ["technologie", "developpeur", "crypto", "logiciel-libre", "g1", "innovation", "digital", "monnaie"],
                    "corpus": {
                        "vocabulary": ["protocole", "infrastructure", "d√©centralisation", "souverainet√© cryptographique", "blockchain", "open-source", "r√©silience", "API", "IPFS", "NOSTR", "stack technique", "scalabilit√©", "on-chain"],
                        "arguments": [
                            "Le MULTIPASS est une impl√©mentation NOSTR s√©curis√©e, liant l'identit√© √† une preuve cryptographique via la ToC ƒû1.",
                            "L'architecture Astroport (IPFS+NOSTR) est con√ßue pour la scalabilit√©, √©vitant la lourdeur de synchronisation inh√©rente √† des protocoles comme Scuttlebutt.",
                            "Le ·∫êen offre une comptabilit√© on-chain transparente pour la coop√©rative, transformant la gestion des actifs en transactions auditables."
                        ],
                        "tone": "pragmatique, pr√©cis, direct, informatif",
                        "examples": [
                            "Notre objectif est de fournir une stack technique compl√®te pour l'auto-h√©bergement, de la gestion des cl√©s √† la persistance des donn√©es.",
                            "Le code est auditable sur notre d√©p√¥t Git ; les contributions et les tests de performance sont les bienvenus."
                        ]
                    }
                },
                "1": {
                    "name": "Philosophe/Militant",
                    "description": "Voix visionnaire et engag√©e qui s'adresse aux citoyens acteurs du changement. Met l'accent sur l'impact soci√©tal, la r√©silience collective et l'√©thique des biens communs.",
                    "archetype": "Le Militant",
                    "themes": ["souverainete", "transition", "ecologie", "collectif", "local", "partage", "entraide", "communautaire", "liberte", "humain"],
                    "corpus": {
                        "vocabulary": ["souverainet√© populaire", "biens communs", "r√©silience", "alternative aux GAFAM", "coop√©rative", "gouvernance", "pacte social", "reprendre le contr√¥le", "monnaie citoyenne", "dystopie cognitive", "r√©g√©n√©ration √©cologique"],
                        "arguments": [
                            "Nous b√¢tissons une alternative aux GAFAM o√π vos donn√©es ne sont pas une marchandise mais la fondation d'un bien commun.",
                            "Nous ne b√¢tissons pas un logiciel, nous construisons une soci√©t√© o√π la coop√©ration prime sur la comp√©tition.",
                            "Notre mod√®le coop√©ratif garantit que les b√©n√©fices sont r√©investis dans des projets concrets, comme l'acquisition de for√™ts-jardins.",
                            "Le projet est un acte politique : chaque n≈ìud h√©berg√© est une parcelle de souverainet√© num√©rique reprise au syst√®me centralis√©."
                        ],
                        "tone": "inspirant, visionnaire, √©thique",
                        "examples": [
                            "Rejoignez un mouvement qui transforme la valeur num√©rique en un impact tangible et positif pour le vivant.",
                            "C'est une invitation √† devenir co-propri√©taire de notre futur num√©rique et √©cologique commun."
                        ]
                    }
                },
                "2": {
                    "name": "Cr√©ateur/Artisan",
                    "description": "Voix concr√®te et valorisante qui s'adresse aux artisans et cr√©ateurs. Met l'accent sur l'autonomie, les outils pratiques et la juste r√©mun√©ration du savoir-faire.",
                    "archetype": "Le Cr√©ateur",
                    "themes": ["creatif", "savoir-faire", "artisanat", "creation", "artiste", "artisan", "creation", "musique", "produits-naturels", "fermentation"],
                    "corpus": {
                        "vocabulary": ["cr√©ation de valeur" , "autonomie" , "circuit-court" , "juste r√©mun√©ration" , "atelier num√©rique" , "savoir-faire" , "√©conomie r√©elle" , "sans interm√©diaire" , "portfolio d√©centralis√©", "pi√®ce unique", "atelier", "valorisation"],
                        "arguments": [
                            "Notre √©cosyst√®me vous fournit les outils pour vendre vos cr√©ations en direct, sans verser de commission aux plateformes.",
                            "Le ·∫êen est un outil stable qui permet de fixer un prix juste pour votre travail et d'√™tre pay√© instantan√©ment en ƒû1.",
                            "UPlanet est votre atelier num√©rique personnel : un espace pour exposer, partager et mon√©tiser votre talent en toute libert√©."
                        ],
                        "tone": "concret, valorisant, pragmatique, passionn√©",
                        "examples": [
                            "Votre talent a de la valeur. Notre syst√®me est con√ßu pour la reconna√Ætre et la r√©mun√©rer √©quitablement.",
                            "Imaginez une place de march√© o√π chaque artisan est aussi co-propri√©taire de la place elle-m√™me."
                        ]
                    }
                },
                "3": {
                    "name": "Holistique/Th√©rapeute",
                    "description": "Voix bienveillante et inspirante qui s'adresse √† la communaut√© du bien-√™tre et de la spiritualit√©. Met l'accent sur la qualit√© du lien, l'authenticit√© et un environnement sain.",
                    "archetype": "L'Holistique",
                    "themes": ["spiritualite", "nature", "permaculture", "bien-etre", "therapeute", "spirituel", "holistique", "sain", "naturel", "personnel", "transformation", "accompagnement"],
                    "corpus": {
                        "vocabulary": [ "harmonie", "√©quilibre", "bien-√™tre", "conscience", "croissance", "connexion", "r√©g√©n√©ration", "soin", "√©nergie", "alignement", "communaut√© de confiance", "jardin num√©rique", "authenticit√©"],
                        "arguments": [
                            "Nous cr√©ons un espace num√©rique align√© avec des valeurs de respect et de bienveillance, loin du bruit et de la toxicit√© des r√©seaux sociaux.",
                            "La Toile de Confiance ƒû1 garantit des √©changes entre humains certifi√©s, pour une communication authentique et s√©curis√©e.",
                            "Notre technologie est con√ßue pour √™tre au service du lien humain, et non pour capter et mon√©tiser votre attention."
                        ],
                        "tone": "inspirant, doux, bienveillant",
                        "examples": [
                            "Retrouvez une connexion v√©ritable au sein d'une communaut√© qui partage vos valeurs de croissance et de respect.",
                            "Nous b√¢tissons un jardin num√©rique o√π les belles id√©es et les relations saines peuvent grandir en paix."
                        ]
                    }
                }
            },
            "available_themes": self._get_available_themes()
        }

    def _get_available_themes(self):
        """R√©cup√®re la liste des th√®mes disponibles depuis l'analyse"""
        try:
            enriched_file = self.shared_state['config']['enriched_prospects_file']
            if os.path.exists(enriched_file):
                with open(enriched_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)

                # Extraire tous les th√®mes uniques
                themes = set()
                for pubkey, profile_data in data.items():
                    metadata = profile_data.get('metadata', {})
                    tags = metadata.get('tags', [])
                    if isinstance(tags, list) and tags != ['error']:
                        themes.update(tags)

                return sorted(list(themes))
        except Exception as e:
            self.logger.error(f"Erreur lors de la r√©cup√©ration des th√®mes : {e}")

        return []

    def _display_banks_status(self, banks_config):
        """Affiche l'√©tat des banques de m√©moire"""
        print("\nüìä √âTAT DES BANQUES DE M√âMOIRE :")
        print("-" * 60)

        for slot, bank in banks_config['banks'].items():
            status = "‚úÖ" if bank.get('corpus') else "‚ùå"
            themes_count = len(bank.get('themes', []))
            print(f"{status} Banque #{slot}: {bank['name']}")
            print(f"    Arch√©type: {bank.get('archetype', 'Non d√©fini')}")
            print(f"    Th√®mes associ√©s: {themes_count}")
            print(f"    Corpus: {'Rempli' if bank.get('corpus') else 'Vide'}")
            print()

    def _configure_bank(self, banks_config):
        """Configure une banque de m√©moire"""
        print("\nüîß CONFIGURATION D'UNE BANQUE")
        print("-" * 40)

        # Afficher les banques disponibles avec plus de d√©tails
        for slot in range(12):
            bank = banks_config['banks'].get(str(slot), {})
            name = bank.get('name', 'Non configur√©e')
            archetype = bank.get('archetype', 'Non d√©fini')
            has_corpus = bool(bank.get('corpus'))
            status = "‚úÖ" if has_corpus else "‚ùå"
            print(f"{slot}. {status} {name} ({archetype})")

        try:
            slot = input("\nChoisissez le num√©ro de la banque (0-11) : ").strip()
            if not (0 <= int(slot) <= 11):
                print("‚ùå Num√©ro de banque invalide")
                return banks_config

            slot = str(slot)
            bank = banks_config['banks'].get(slot, {})

            print(f"\n{'='*50}")
            print(f"CONFIGURATION DE LA BANQUE #{slot}")
            print(f"{'='*50}")

            # Afficher la configuration actuelle
            print(f"üìù Nom actuel : {bank.get('name', 'Non d√©fini')}")
            print(f"üé≠ Arch√©type actuel : {bank.get('archetype', 'Non d√©fini')}")
            print(f"üìñ Description actuelle :")
            current_desc = bank.get('description', 'Aucune description')
            if current_desc:
                print(f"   {current_desc}")
            else:
                print("   Aucune description")

            print(f"\n{'='*50}")
            print("MODIFICATIONS (Entr√©e pour garder la valeur actuelle)")
            print(f"{'='*50}")

            # Nom
            name = input(f"Nouveau nom [{bank.get('name', 'Non d√©fini')}] : ").strip()
            if name:
                bank['name'] = name

            # Description
            print(f"\nDescription actuelle :")
            if current_desc:
                print(f"   {current_desc}")
            else:
                print("   Aucune description")
            description = input("Nouvelle description (Entr√©e pour garder) : ").strip()
            if description:
                bank['description'] = description

            # Arch√©type
            archetype = input(f"Nouvel arch√©type [{bank.get('archetype', 'Non d√©fini')}] : ").strip()
            if archetype:
                bank['archetype'] = archetype

            banks_config['banks'][slot] = bank
            print(f"\n‚úÖ Banque #{slot} configur√©e avec succ√®s")

        except ValueError:
            print("‚ùå Entr√©e invalide")

        return banks_config

    def _associate_themes_to_bank(self, banks_config):
        """Associe des th√®mes √† une banque"""
        print("\nüè∑Ô∏è ASSOCIATION DE TH√àMES √Ä UNE BANQUE")
        print("-" * 40)

        # Afficher les banques
        for slot in range(12):
            bank = banks_config['banks'].get(str(slot), {})
            name = bank.get('name', 'Non configur√©e')
            themes = bank.get('themes', [])
            print(f"{slot}. {name} ({len(themes)} th√®mes)")

        try:
            slot = input("\nChoisissez le num√©ro de la banque (0-11) : ").strip()
            if not (0 <= int(slot) <= 11):
                print("‚ùå Num√©ro de banque invalide")
                return banks_config

            slot = str(slot)
            bank = banks_config['banks'].get(slot, {})

            print(f"\nTh√®mes disponibles :")
            available_themes = banks_config.get('available_themes', [])
            for i, theme in enumerate(available_themes):
                print(f"{i+1}. {theme}")

            print(f"\nTh√®mes actuellement associ√©s √† la banque #{slot} :")
            current_themes = bank.get('themes', [])
            for theme in current_themes:
                print(f"  - {theme}")

            print("\nEntrez les num√©ros des th√®mes √† associer (s√©par√©s par des virgules) :")
            print("Exemple: 1,3,5 pour associer les th√®mes 1, 3 et 5")

            choice = input("Votre choix : ").strip()
            if choice:
                try:
                    indices = [int(x.strip()) - 1 for x in choice.split(',')]
                    selected_themes = [available_themes[i] for i in indices if 0 <= i < len(available_themes)]
                    bank['themes'] = selected_themes
                    banks_config['banks'][slot] = bank
                    print(f"‚úÖ {len(selected_themes)} th√®mes associ√©s √† la banque #{slot}")
                except (ValueError, IndexError):
                    print("‚ùå Format invalide")

        except ValueError:
            print("‚ùå Entr√©e invalide")

        return banks_config

    def _fill_bank_corpus(self, banks_config):
        """Remplit le corpus d'une banque de m√©moire"""
        print("\nüìö REMPLISSAGE DU CORPUS D'UNE BANQUE")
        print("-" * 40)

        # Afficher les banques
        for slot in range(12):
            bank = banks_config['banks'].get(str(slot), {})
            name = bank.get('name', 'Non configur√©e')
            has_corpus = bool(bank.get('corpus'))
            status = "‚úÖ" if has_corpus else "‚ùå"
            print(f"{slot}. {status} {name}")

        try:
            slot = input("\nChoisissez le num√©ro de la banque (0-11) : ").strip()
            if not (0 <= int(slot) <= 11):
                print("‚ùå Num√©ro de banque invalide")
                return banks_config

            slot = str(slot)
            bank = banks_config['banks'].get(slot, {})

            # Afficher les d√©tails des th√®mes
            self._show_bank_themes_details(bank, slot)

            corpus = bank.get('corpus', {})

            # 1. Vocabulaire cl√©
            print(f"\n1Ô∏è‚É£ VOCABULAIRE CL√â")
            print("-" * 30)
            current_vocab = ', '.join(corpus.get('vocabulary', []))
            print(f"Actuel : {current_vocab}")
            print("üí° Conseil : Entrez 8-12 mots techniques sp√©cifiques, s√©par√©s par des virgules")
            vocab = input("Nouveau vocabulaire (Entr√©e pour garder) : ").strip()
            if vocab:
                corpus['vocabulary'] = [word.strip() for word in vocab.split(',') if word.strip()]
                print(f"‚úÖ Vocabulaire mis √† jour ({len(corpus['vocabulary'])} mots)")

            # 2. Arguments cl√©s
            print(f"\n2Ô∏è‚É£ ARGUMENTS PRINCIPAUX")
            print("-" * 30)
            current_args = corpus.get('arguments', [])
            if current_args:
                print("Arguments actuels :")
                for i, arg in enumerate(current_args, 1):
                    print(f"  {i}. {arg}")

            print("\nüí° Conseil : Entrez 3-5 arguments cl√©s (une phrase par ligne)")
            print("üí° Conseil : Appuyez sur Entr√©e deux fois pour terminer")
            print("üí° Conseil : Laissez vide pour garder les arguments actuels")

            new_args = []
            try:
                while True:
                    arg = input("Nouvel argument (ou Entr√©e pour terminer) : ").strip()
                    if not arg:
                        if new_args:  # Si on a d√©j√† saisi des arguments
                            break
                        else:  # Si c'est le premier Entr√©e, garder les actuels
                            new_args = current_args
                            break
                    new_args.append(arg)
            except KeyboardInterrupt:
                print("\n‚ö†Ô∏è Saisie interrompue. Arguments actuels conserv√©s.")
                new_args = current_args

            if new_args:
                corpus['arguments'] = new_args
                print(f"‚úÖ Arguments mis √† jour ({len(corpus['arguments'])} arguments)")

            # 3. Ton de communication
            print(f"\n3Ô∏è‚É£ TON DE COMMUNICATION")
            print("-" * 30)
            current_tone = corpus.get('tone', 'Non d√©fini')
            print(f"Actuel : {current_tone}")
            print("üí° Conseil : 3-4 adjectifs maximum (ex: pragmatique, pr√©cis, direct)")
            tone = input("Nouveau ton (Entr√©e pour garder) : ").strip()
            if tone:
                corpus['tone'] = tone
                print(f"‚úÖ Ton mis √† jour : {tone}")

            # 4. Exemples de phrases
            print(f"\n4Ô∏è‚É£ EXEMPLES DE PHRASES")
            print("-" * 30)
            current_examples = corpus.get('examples', [])
            if current_examples:
                print("Exemples actuels :")
                for i, example in enumerate(current_examples, 1):
                    print(f"  {i}. {example}")

            print("\nüí° Conseil : Entrez 2-3 exemples de phrases engageantes")
            print("üí° Conseil : Appuyez sur Entr√©e deux fois pour terminer")
            print("üí° Conseil : Laissez vide pour garder les exemples actuels")

            new_examples = []
            try:
                while True:
                    example = input("Nouvel exemple (ou Entr√©e pour terminer) : ").strip()
                    if not example:
                        if new_examples:  # Si on a d√©j√† saisi des exemples
                            break
                        else:  # Si c'est le premier Entr√©e, garder les actuels
                            new_examples = current_examples
                            break
                    new_examples.append(example)
            except KeyboardInterrupt:
                print("\n‚ö†Ô∏è Saisie interrompue. Exemples actuels conserv√©s.")
                new_examples = current_examples

            if new_examples:
                corpus['examples'] = new_examples
                print(f"‚úÖ Exemples mis √† jour ({len(corpus['examples'])} exemples)")

            # Sauvegarder les modifications
            bank['corpus'] = corpus
            banks_config['banks'][slot] = bank

            print(f"\n{'='*60}")
            print(f"‚úÖ CORPUS DE LA BANQUE #{slot} MIS √Ä JOUR")
            print(f"{'='*60}")
            print(f"üìù Nom : {bank['name']}")
            print(f"üé≠ Arch√©type : {bank['archetype']}")
            print(f"üìö Vocabulaire : {len(corpus.get('vocabulary', []))} mots")
            print(f"üí¨ Arguments : {len(corpus.get('arguments', []))} arguments")
            print(f"üéØ Ton : {corpus.get('tone', 'Non d√©fini')}")
            print(f"üìñ Exemples : {len(corpus.get('examples', []))} exemples")

        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è Configuration interrompue par l'utilisateur.")
            print("üíæ Les donn√©es saisies jusqu'√† pr√©sent ont √©t√© sauvegard√©es.")
        except Exception as e:
            print(f"\n‚ùå Erreur lors du remplissage du corpus : {e}")
            print("üíæ Les donn√©es saisies jusqu'√† pr√©sent ont √©t√© sauvegard√©es.")

        return banks_config

    def _sync_themes_from_analyst(self, banks_config):
        """Synchronise les th√®mes identifi√©s par l'Agent Analyste avec la configuration des banques"""
        print("\nüîÑ SYNCHRONISATION DES TH√àMES")
        print("-" * 40)

        # R√©cup√©rer les th√®mes disponibles depuis l'analyse
        available_themes = self._get_available_themes()

        if not available_themes:
            print("‚ùå Aucun th√®me disponible depuis l'Agent Analyste")
            print("üí° Assurez-vous que l'Agent Analyste a √©t√© ex√©cut√©")
            return banks_config

        print(f"üìã Th√®mes identifi√©s par l'Agent Analyste ({len(available_themes)}) :")
        for i, theme in enumerate(available_themes, 1):
            print(f"  {i:2d}. {theme}")

        # Mettre √† jour la liste des th√®mes disponibles dans la configuration
        banks_config['available_themes'] = available_themes

        print(f"\n‚úÖ {len(available_themes)} th√®mes synchronis√©s")
        print("üí° Vous pouvez maintenant associer ces th√®mes aux banques")

        return banks_config

    def _show_bank_themes_details(self, bank, slot):
        """Affiche les d√©tails des th√®mes d'une banque"""
        print(f"\n{'='*60}")
        print(f"REMPLISSAGE DU CORPUS - BANQUE #{slot}")
        print(f"{'='*60}")
        print(f"üìù Nom : {bank.get('name', 'Non nomm√©e')}")
        print(f"üé≠ Arch√©type : {bank.get('archetype', 'Non d√©fini')}")

        # Afficher les th√®mes actuels
        current_themes = bank.get('themes', [])
        if current_themes:
            print(f"üè∑Ô∏è Th√®mes associ√©s ({len(current_themes)}) : {', '.join(current_themes)}")
        else:
            print(f"üè∑Ô∏è Th√®mes associ√©s : Aucun")

        # Afficher les th√®mes disponibles pour r√©f√©rence
        available_themes = self._get_available_themes()
        if available_themes:
            print(f"üìã Th√®mes disponibles ({len(available_themes)}) : {', '.join(available_themes[:10])}{'...' if len(available_themes) > 10 else ''}")

        print(f"{'='*60}")

    def _test_bank_message(self, banks_config):
        """Teste la g√©n√©ration d'un message avec une banque sp√©cifique"""
        print("\nüß™ TEST DE G√âN√âRATION DE MESSAGE")
        print("-" * 40)

        # Afficher les banques disponibles
        for slot in range(12):
            bank = banks_config['banks'].get(str(slot), {})
            if bank.get('name'):
                print(f"{slot}. {bank['name']}")

        try:
            slot = input("\nChoisissez le num√©ro de la banque √† tester : ").strip()
            if not (0 <= int(slot) <= 11):
                print("‚ùå Num√©ro de banque invalide")
                return

            slot = str(slot)
            bank = banks_config['banks'].get(slot, {})

            if not bank.get('name'):
                print("‚ùå Banque non configur√©e")
                return

            print(f"\nTest de la banque #{slot} : {bank['name']}")

            # Afficher les liens disponibles
            available_links = self._get_available_links(self.shared_state['config'])
            if available_links:
                print(f"\nüîó Liens disponibles pour injection :")
                for link in available_links:
                    print(f"  {link}")
                print(f"\nüí° L'agent peut utiliser ces placeholders dans ses messages :")
                print(f"  ‚Ä¢ [Lien vers OpenCollective]")
                print(f"  ‚Ä¢ [Lien vers Documentation]")
                print(f"  ‚Ä¢ [Lien vers GitHub]")
                print(f"  ‚Ä¢ [Lien vers Discord]")
                print(f"  ‚Ä¢ etc...")
            else:
                print(f"\n‚ö†Ô∏è Aucun lien configur√©. Les placeholders seront supprim√©s.")

            # G√©n√©rer le message
            message = self._generate_message_with_bank(bank, self.shared_state['config'])

            print(f"\n{'='*50}")
            print(f"MESSAGE G√âN√âR√â :")
            print(f"{'='*50}")
            print(message)
            print(f"{'='*50}")

            # Afficher les statistiques du message
            word_count = len(message.split())
            char_count = len(message)
            link_count = len(re.findall(r'https?://[^\s]+', message))

            print(f"\nüìä Statistiques du message :")
            print(f"  ‚Ä¢ Mots : {word_count}")
            print(f"  ‚Ä¢ Caract√®res : {char_count}")
            print(f"  ‚Ä¢ Liens d√©tect√©s : {link_count}")

        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è Test interrompu par l'utilisateur.")
        except Exception as e:
            print(f"‚ùå Erreur lors du test : {e}")

    def _generate_message_with_bank(self, bank, target_description):
        """G√©n√®re un message en utilisant une banque de m√©moire sp√©cifique"""
        corpus = bank.get('corpus', {})

        prompt = f"""Tu es l'Agent Strat√®ge d'UPlanet. Tu dois r√©diger un message de campagne en adoptant la personnalit√© de la banque de m√©moire suivante :

ARCH√âTYPE : {bank.get('archetype', 'Non d√©fini')}
NOM DE LA BANQUE : {bank.get('name', 'Non nomm√©e')}
TH√àMES ASSOCI√âS : {', '.join(bank.get('themes', []))}

TON DE COMMUNICATION : {corpus.get('tone', 'Non d√©fini')}

VOCABULAIRE CL√â √Ä UTILISER : {', '.join(corpus.get('vocabulary', []))}

ARGUMENTS PRINCIPAUX :
{chr(10).join([f"- {arg}" for arg in corpus.get('arguments', [])])}

EXEMPLES DE PHRASES :
{chr(10).join([f"- {example}" for example in corpus.get('examples', [])])}

T√ÇCHE : R√©dige un message de campagne pour pr√©senter UPlanet et le MULTIPASS √† des personnes int√©ress√©es par : {target_description}

Le message doit :
1. Utiliser le vocabulaire et le ton de cette banque
2. Int√©grer les arguments principaux
3. S'inspirer des exemples fournis
4. √ätre personnalis√© et engageant
5. Inclure un appel √† l'action vers OpenCollective

IMPORTANT - PLACEHOLDERS DE LIENS : Tu DOIS utiliser EXCLUSIVEMENT ces placeholders pour tous les liens. NE PAS √©crire d'URLs directement :

OBLIGATOIRE - Utilise ces placeholders :
- [Lien vers OpenCollective] pour le financement participatif
- [Lien vers Documentation] pour la documentation technique
- [Lien vers GitHub] pour le code source
- [Lien vers Discord] pour la communaut√©
- [Lien vers Site Web] pour le site principal
- [Lien vers Blog] pour les actualit√©s
- [Lien vers Forum] pour les discussions
- [Lien vers Wiki] pour la documentation collaborative
- [Lien vers Mastodon] pour le r√©seau social d√©centralis√©
- [Lien vers Nostr] pour le protocole de communication
- [Lien vers IPFS] pour le stockage d√©centralis√©
- [Lien vers G1] pour la monnaie libre
- [Lien vers UPlanet] pour le projet principal
- [Lien vers Astroport] pour l'infrastructure
- [Lien vers Zen] pour la comptabilit√©
- [Lien vers Multipass] pour l'identit√©

R√àGLE STRICTE : N'√©cris JAMAIS d'URLs compl√®tes comme "https://..." dans ton message. Utilise UNIQUEMENT les placeholders ci-dessus.

Exemple correct : "Rejoignez-nous sur [Lien vers Discord]"
Exemple INCORRECT : "Rejoignez-nous sur https://discord.gg/uplanet"

Format : Message de 150-200 mots maximum."""

        try:
            result = subprocess.run(
                ['python3', self.shared_state['config']['question_script'], prompt, '--json'],
                capture_output=True, text=True, check=True
            )
            response = json.loads(result.stdout)
            message_content = response.get('answer', 'Erreur lors de la g√©n√©ration')

            # V√©rifier si l'agent a utilis√© des URLs directes
            direct_urls = re.findall(r'https?://[^\s]+', message_content)
            if direct_urls:
                self.logger.warning(f"‚ö†Ô∏è L'agent a utilis√© des URLs directes au lieu des placeholders : {direct_urls}")
                # Remplacer les URLs directes par des placeholders appropri√©s
                message_content = self._replace_direct_urls_with_placeholders(message_content)

            return self._inject_links(message_content, self.shared_state['config'])
        except Exception as e:
            self.logger.error(f"Erreur lors de la g√©n√©ration avec banque : {e}")
            return f"Erreur lors de la g√©n√©ration : {e}"

    def _save_banks_config(self, banks_config, config_file):
        """Sauvegarde la configuration des banques"""
        try:
            os.makedirs(os.path.dirname(config_file), exist_ok=True)
            with open(config_file, 'w', encoding='utf-8') as f:
                json.dump(banks_config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            self.logger.error(f"Erreur lors de la sauvegarde : {e}")

    def _inject_links(self, message, config):
        """Injecte intelligemment les liens dans le message en rempla√ßant les placeholders"""
        # Charger la configuration des liens depuis le fichier
        links_config = self._load_links_config()

        # Patterns de d√©tection des placeholders
        link_patterns = {
            r'\[Lien vers OpenCollective\]': links_config.get('opencollective', ''),
            r'\[Lien vers Documentation\]': links_config.get('documentation', ''),
            r'\[Lien vers GitHub\]': links_config.get('github', ''),
            r'\[Lien vers Discord\]': links_config.get('discord', ''),
            r'\[Lien vers Telegram\]': links_config.get('telegram', ''),
            r'\[Lien vers Site Web\]': links_config.get('website', ''),
            r'\[Lien vers Blog\]': links_config.get('blog', ''),
            r'\[Lien vers Forum\]': links_config.get('forum', ''),
            r'\[Lien vers Wiki\]': links_config.get('wiki', ''),
            r'\[Lien vers Mastodon\]': links_config.get('mastodon', ''),
            r'\[Lien vers Nostr\]': links_config.get('nostr', ''),
            r'\[Lien vers IPFS\]': links_config.get('ipfs', ''),
            r'\[Lien vers G1\]': links_config.get('g1', ''),
            r'\[Lien vers UPlanet\]': links_config.get('uplanet', ''),
            r'\[Lien vers Astroport\]': links_config.get('astroport', ''),
            r'\[Lien vers Zen\]': links_config.get('zen', ''),
            r'\[Lien vers Multipass\]': links_config.get('multipass', ''),
        }

        # Remplacer les placeholders par les vrais liens
        for pattern, link in link_patterns.items():
            if link:
                message = re.sub(pattern, link, message, flags=re.IGNORECASE)
            else:
                # Si le lien n'est pas configur√©, supprimer le placeholder
                message = re.sub(pattern, '', message, flags=re.IGNORECASE)

        # Nettoyer les espaces multiples cr√©√©s par les suppressions
        message = re.sub(r'\s+', ' ', message)
        message = re.sub(r'\n\s*\n\s*\n', '\n\n', message)

        return message.strip()

    def _get_available_links(self, config):
        """Retourne la liste des liens disponibles pour l'aide"""
        # Charger la configuration des liens depuis le fichier
        links_config = self._load_links_config()
        available_links = []

        link_names = {
            'opencollective': 'OpenCollective',
            'documentation': 'Documentation',
            'github': 'GitHub',
            'discord': 'Discord',
            'telegram': 'Telegram',
            'website': 'Site Web',
            'blog': 'Blog',
            'forum': 'Forum',
            'wiki': 'Wiki',
            'mastodon': 'Mastodon',
            'nostr': 'Nostr',
            'ipfs': 'IPFS',
            'g1': 'G1',
            'uplanet': 'UPlanet',
            'astroport': 'Astroport',
            'zen': 'Zen',
            'multipass': 'Multipass'
        }

        for key, name in link_names.items():
            if links_config.get(key):
                available_links.append(f"‚Ä¢ {name}: {links_config[key]}")

        return available_links

    def _load_links_config(self):
        """Charge la configuration des liens depuis le fichier"""
        links_config_file = os.path.join(self.shared_state['config']['workspace'], 'links_config.json')

        # Configuration par d√©faut
        default_links = {
            'opencollective': 'https://opencollective.com/monnaie-libre',
            'documentation': 'https://github.com/papiche/Astroport.ONE/blob/master/DOCUMENTATION.md',
            'github': 'https://github.com/papiche/Astroport.ONE',
            'discord': 'https://ipfs.copylaradio.com/ipns/copylaradio.com/bang.html',
            'telegram': 'https://t.me/AstroportN1',
            'website': 'https://copylaradio.com',
            'blog': 'https://www.copylaradio.com/blog/blog-1',
            'forum': 'https://forum.monnaie-libre.fr/',
            'wiki': 'https://pad.p2p.legal',
            'mastodon': 'https://mastodon.social/@qoop',
            'nostr': 'https://fr.wikipedia.org/wiki/Nostr',
            'ipfs': 'https://fr.wikipedia.org/wiki/InterPlanetary_File_System',
            'g1': 'https://monnaie-libre.fr/',
            'uplanet': 'https://qo-op.com',
            'astroport': 'https://astroport.com',
            'zen': 'https://zen.g1sms.fr',
            'multipass': 'https://u.copylaradio.com/g1',
        }

        try:
            if os.path.exists(links_config_file):
                with open(links_config_file, 'r', encoding='utf-8') as f:
                    saved_links = json.load(f)
                    # Fusionner avec les valeurs par d√©faut (les valeurs sauvegard√©es ont la priorit√©)
                    links_config = {**default_links, **saved_links}
                    self.logger.info(f"‚úÖ Configuration des liens charg√©e depuis {links_config_file}")
                    return links_config
            else:
                # Cr√©er le fichier avec les valeurs par d√©faut
                self._save_links_config(default_links)
                self.logger.info(f"‚úÖ Fichier de configuration des liens cr√©√© avec les valeurs par d√©faut")
                return default_links
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors du chargement de la configuration des liens : {e}")
            return default_links

    def _save_links_config(self, links_config):
        """Sauvegarde la configuration des liens dans le fichier"""
        links_config_file = os.path.join(self.shared_state['config']['workspace'], 'links_config.json')

        try:
            os.makedirs(os.path.dirname(links_config_file), exist_ok=True)
            with open(links_config_file, 'w', encoding='utf-8') as f:
                json.dump(links_config, f, indent=2, ensure_ascii=False)
            self.logger.info(f"‚úÖ Configuration des liens sauvegard√©e dans {links_config_file}")
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de la sauvegarde de la configuration des liens : {e}")

    def _configure_links(self, config):
        """Configure les liens pour l'injection automatique"""
        print("\nüîó CONFIGURATION DES LIENS")
        print("-" * 40)
        print("Ces liens seront automatiquement inject√©s dans les messages")
        print("quand l'agent utilise des placeholders comme [Lien vers OpenCollective]")
        print()

        # Charger la configuration actuelle
        links_config = self._load_links_config()

        # Liste des liens configurables avec leurs noms d'affichage
        link_configs = [
            ('opencollective', 'OpenCollective'),
            ('documentation', 'Documentation'),
            ('github', 'GitHub'),
            ('discord', 'Discord'),
            ('telegram', 'Telegram'),
            ('website', 'Site Web'),
            ('blog', 'Blog'),
            ('forum', 'Forum'),
            ('wiki', 'Wiki'),
            ('mastodon', 'Mastodon'),
            ('nostr', 'Nostr'),
            ('ipfs', 'IPFS'),
            ('g1', 'G1'),
            ('uplanet', 'UPlanet'),
            ('astroport', 'Astroport'),
            ('zen', 'Zen'),
            ('multipass', 'Multipass'),
        ]

        for key, name in link_configs:
            current_url = links_config.get(key, '')
            print(f"\nüîó {name}")
            print(f"   Placeholder : [Lien vers {name}]")
            if current_url:
                print(f"   Actuel : {current_url}")
            else:
                print(f"   Actuel : Non configur√©")

            new_url = input(f"   Nouveau lien (Entr√©e pour garder) : ").strip()
            if new_url:
                links_config[key] = new_url
                print(f"   ‚úÖ {name} mis √† jour")

        # Sauvegarder la configuration
        self._save_links_config(links_config)

        # Mettre √† jour la configuration dans le shared_state
        config['links'] = links_config

        print(f"\n{'='*50}")
        print(f"‚úÖ CONFIGURATION DES LIENS TERMIN√âE")
        print(f"{'='*50}")
        print(f"üîó Liens configur√©s : {len([k for k, v in links_config.items() if v])}")
        print(f"‚ùå Liens manquants : {len([k for k, v in links_config.items() if not v])}")

        return config

    def _replace_direct_urls_with_placeholders(self, message):
        """Remplace les URLs directes par des placeholders appropri√©s"""
        links_config = self._load_links_config()

        # Mapping des URLs vers les placeholders
        url_to_placeholder = {}
        for key, url in links_config.items():
            if url:
                url_to_placeholder[url] = f"[Lien vers {key.title()}]"

        # Remplacer les URLs par les placeholders
        for url, placeholder in url_to_placeholder.items():
            message = message.replace(url, placeholder)

        return message

    def _choose_bank_for_classic_method(self, banks_config):
        """Permet de choisir une banque de contexte pour la m√©thode classique"""
        print("\nüé≠ CHOIX DE LA BANQUE DE CONTEXTE")
        print("-" * 40)
        print("Vous pouvez choisir une banque de m√©moire pour enrichir le contexte")
        print("ou continuer sans banque (m√©thode classique pure)")
        print()
        
        # Afficher les banques disponibles
        available_banks = []
        for slot in range(12):
            bank = banks_config['banks'].get(str(slot), {})
            if bank.get('name') and bank.get('corpus'):
                available_banks.append((slot, bank))
                print(f"{slot}. {bank['name']} ({bank.get('archetype', 'Non d√©fini')})")
        
        if not available_banks:
            print("‚ùå Aucune banque configur√©e avec corpus")
            return None
        
        print(f"{len(available_banks)}. Aucune banque (m√©thode classique pure)")
        
        try:
            choice = input(f"\nChoisissez une banque (0-{len(available_banks)-1}) ou {len(available_banks)} pour aucune : ").strip()
            choice_int = int(choice)
            
            if choice_int == len(available_banks):
                print("‚úÖ M√©thode classique pure s√©lectionn√©e")
                return None
            elif 0 <= choice_int < len(available_banks):
                selected_slot, selected_bank = available_banks[choice_int]
                print(f"‚úÖ Banque s√©lectionn√©e : {selected_bank['name']}")
                return selected_bank
            else:
                print("‚ùå Choix invalide, utilisation de la m√©thode classique pure")
                return None
                
        except (ValueError, KeyboardInterrupt):
            print("‚ùå Choix invalide, utilisation de la m√©thode classique pure")
            return None

    def _analyze_profile_and_select_bank(self, targets, banks_config):
        """Analyse le profil du prospect et s√©lectionne automatiquement la banque la plus adapt√©e"""
        self.logger.info("üîç Mode Persona : Analyse du profil du prospect...")
        
        if not targets:
            return None
            
        target = targets[0]  # Prendre la premi√®re cible pour l'analyse
        
        # Construire le profil complet
        profile_data = {
            'uid': target.get('uid', ''),
            'website': target.get('website', ''),
            'tags': target.get('tags', []),
            'description': target.get('description', ''),
            'analyst_report': self.shared_state.get('analyst_report', ''),
            'web_context': ''
        }
        
        # Enrichir avec le contexte web si disponible
        if target.get('website'):
            self.logger.info(f"üïµÔ∏è  Recherche Perplexica pour enrichir le profil : {target['website']}")
            search_query = f"Analyse le profil de {target.get('uid', '')} et son site {target['website']}. Identifie ses centres d'int√©r√™t, son domaine d'activit√©, ses valeurs et son style de communication."
            try:
                profile_data['web_context'] = self._call_perplexica(search_query)
                self.logger.info("‚úÖ Contexte web obtenu pour l'analyse de profil")
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è Impossible d'obtenir le contexte web : {e}")
        
        # Construire le prompt d'analyse
        analysis_prompt = f"""Tu es un expert en analyse de profils pour UPlanet. Tu dois analyser le profil d'un prospect et d√©terminer quelle banque de m√©moire (persona) est la plus adapt√©e pour lui adresser un message personnalis√©.

PROFIL DU PROSPECT :
- Identifiant : {profile_data['uid']}
- Site web : {profile_data['website']}
- Tags : {', '.join(profile_data['tags'])}
- Description : {profile_data['description']}
- Rapport Analyste : {profile_data['analyst_report']}
- Contexte Web : {profile_data['web_context']}

BANQUES DE M√âMOIRE DISPONIBLES :"""

        # Ajouter les informations sur les banques disponibles
        available_banks = []
        for slot in range(12):
            bank = banks_config['banks'].get(str(slot), {})
            if bank.get('name') and bank.get('corpus'):
                available_banks.append((slot, bank))
                analysis_prompt += f"\n- {bank['name']} (Archetype: {bank.get('archetype', 'Non d√©fini')}, Th√®mes: {', '.join(bank.get('themes', []))})"
        
        if not available_banks:
            self.logger.warning("‚ö†Ô∏è Aucune banque configur√©e pour l'analyse de profil")
            return None
        
        analysis_prompt += f"""

INSTRUCTIONS :
1. Analyse le profil du prospect en d√©tail
2. Identifie ses centres d'int√©r√™t, son domaine d'activit√©, ses valeurs
3. D√©termine quel archetype de banque correspond le mieux √† son profil
4. R√©ponds UNIQUEMENT avec le num√©ro de la banque (0-{len(available_banks)-1}) qui correspond le mieux
5. Si aucune banque ne correspond vraiment, r√©ponds "AUCUNE"

ANALYSE :"""

        # Appeler l'IA pour l'analyse
        try:
            self.logger.info("üß† Analyse du profil par l'IA...")
            analysis_result = self._call_ia_for_writing(analysis_prompt)
            
            # Extraire le num√©ro de la banque s√©lectionn√©e
            import re
            bank_match = re.search(r'\b(\d+)\b', analysis_result.strip())
            
            if bank_match:
                bank_index = int(bank_match.group(1))
                if 0 <= bank_index < len(available_banks):
                    selected_slot, selected_bank = available_banks[bank_index]
                    self.logger.info(f"‚úÖ Banque s√©lectionn√©e automatiquement : {selected_bank['name']}")
                    
                    # Afficher le raisonnement
                    print(f"\nüé≠ ANALYSE DE PROFIL - R√âSULTAT")
                    print(f"Prospect : {profile_data['uid']}")
                    print(f"Banque s√©lectionn√©e : {selected_bank['name']}")
                    print(f"Archetype : {selected_bank.get('archetype', 'Non d√©fini')}")
                    print(f"Th√®mes : {', '.join(selected_bank.get('themes', []))}")
                    print(f"Raisonnement IA : {analysis_result.strip()}")
                    
                    return selected_bank
                else:
                    self.logger.warning(f"‚ö†Ô∏è Index de banque invalide : {bank_index}")
            else:
                self.logger.warning("‚ö†Ô∏è Impossible de d√©terminer la banque depuis l'analyse IA")
                
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de l'analyse de profil : {e}")
        
        return None

    def _generate_message_with_persona_mode(self, selected_bank, treasury_pubkey):
        """G√©n√®re un message en mode Persona avec la banque s√©lectionn√©e automatiquement"""
        self.logger.info(f"üé≠ Mode Persona : G√©n√©ration du message avec {selected_bank['name']}")
        
        try:
            # Construire le contexte enrichi pour la banque
            analyst_report = self.shared_state.get('analyst_report', "Aucun rapport.")
            first_target = self.shared_state['targets'][0]

            # Ajouter le contexte web si disponible
            web_context = ""
            if first_target.get('website'):
                self.logger.info(f"üïµÔ∏è  Recherche Perplexica sur le site : {first_target['website']}...")
                search_query = f"Fais un r√©sum√© de l'activit√© du site {first_target['website']} et de son propri√©taire {first_target.get('uid', '')} pour comprendre ses centres d'int√©r√™t."
                web_context = self._call_perplexica(search_query)
                self.logger.info("‚úÖ Contexte web obtenu.")

            # Construire la description compl√®te pour la banque avec focus sur la personnalisation
            target_description = f"""MODE PERSONA - PERSONNALISATION AVANC√âE

Rapport Analyste: {analyst_report}
Prospect: {json.dumps(first_target, indent=2, ensure_ascii=False)}"""

            if web_context:
                target_description += f"\nContexte Web: {web_context}"
            
            target_description += f"""

INSTRUCTIONS SP√âCIALES MODE PERSONA :
- Utilise l'archetype "{selected_bank.get('archetype', 'Non d√©fini')}" pour adapter ton ton
- Personnalise le message en fonction du profil sp√©cifique du prospect
- Utilise le vocabulaire et les arguments de la banque "{selected_bank['name']}"
- Cr√©e une connexion √©motionnelle bas√©e sur les centres d'int√©r√™t identifi√©s
- Sois authentique et adapte le style au profil analys√©"""

            # G√©n√©rer le message avec la banque
            message_content = self._generate_message_with_bank(selected_bank, target_description)
            
            # Sauvegarder le message
            message_file = os.path.join(self.shared_state['config']['workspace'], 'message_to_send.txt')
            with open(message_file, 'w', encoding='utf-8') as f:
                f.write(message_content)
            
            self.logger.info("‚úÖ Message de campagne r√©dig√© et sauvegard√© dans workspace/message_to_send.txt. Pr√™t pour validation par l'Op√©rateur.")
            self.shared_state['status']['StrategistAgent'] = f"Message r√©dig√© avec banque {selected_bank['name']} (Mode Persona)"
            
        except Exception as e:
            self.logger.error(f"Erreur lors de la g√©n√©ration en mode Persona : {e}")
            self.shared_state['status']['StrategistAgent'] = f"√âchec : {e}"

    def _generate_message_with_bank_mode(self, selected_bank):
        """G√©n√®re un message en mode Auto avec la banque s√©lectionn√©e automatiquement"""
        self.logger.info(f"üé≠ Mode Auto : G√©n√©ration du message avec {selected_bank['name']}")
        
        try:
            # Construire le contexte pour la banque
            analyst_report = self.shared_state.get('analyst_report', "Aucun rapport.")
            first_target = self.shared_state['targets'][0]

            # Ajouter le contexte web si disponible
            web_context = ""
            if first_target.get('website'):
                self.logger.info(f"üïµÔ∏è  Recherche Perplexica sur le site : {first_target['website']}...")
                search_query = f"Fais un r√©sum√© de l'activit√© du site {first_target['website']} et de son propri√©taire {first_target.get('uid', '')} pour comprendre ses centres d'int√©r√™t."
                web_context = self._call_perplexica(search_query)
                self.logger.info("‚úÖ Contexte web obtenu.")

            # Construire la description compl√®te pour la banque
            target_description = f"Rapport Analyste: {analyst_report}"
            if web_context:
                target_description += f"\nContexte Web: {web_context}"
            target_description += f"\nExemple de cible: {json.dumps(first_target, indent=2, ensure_ascii=False)}"

            # G√©n√©rer le message avec la banque
            message_content = self._generate_message_with_bank(selected_bank, target_description)
            
            # Sauvegarder le message
            message_file = os.path.join(self.shared_state['config']['workspace'], 'message_to_send.txt')
            with open(message_file, 'w', encoding='utf-8') as f:
                f.write(message_content)
            
            self.logger.info("‚úÖ Message de campagne r√©dig√© et sauvegard√© dans workspace/message_to_send.txt. Pr√™t pour validation par l'Op√©rateur.")
            self.shared_state['status']['StrategistAgent'] = f"Message r√©dig√© avec banque {selected_bank['name']} (Mode Auto)"
            
        except Exception as e:
            self.logger.error(f"Erreur lors de la g√©n√©ration en mode Auto : {e}")
            self.shared_state['status']['StrategistAgent'] = f"√âchec : {e}"

    def _generate_message_with_classic_mode(self, banks_config, treasury_pubkey):
        """G√©n√®re un message en mode Classique avec choix manuel de banque"""
        self.logger.info("üìù Mode Classique : G√©n√©ration du message")
        
        try:
            # Proposer le choix d'une banque de contexte
            selected_bank = self._choose_bank_for_classic_method(banks_config)
            
            # --- Construction du Prompt Final ---
            # 1. Charger le prompt de base
            prompt_file = self.shared_state['config']['strategist_prompt_file']
            with open(prompt_file, 'r') as f:
                final_prompt = f.read()

            # Remplacer le placeholder du portefeuille Tr√©sor
            final_prompt = final_prompt.replace('[UPLANET_TREASURY_G1PUB]', treasury_pubkey)

            # 2. Ajouter le contexte de la banque si s√©lectionn√©e
            if selected_bank:
                self.logger.info(f"üé≠ Contexte de la banque : {selected_bank['name']}")
                corpus = selected_bank.get('corpus', {})
                
                final_prompt += f"\n\n--- CONTEXTE DE LA BANQUE DE M√âMOIRE ---"
                final_prompt += f"\nArch√©type : {selected_bank.get('archetype', 'Non d√©fini')}"
                final_prompt += f"\nTh√®mes : {', '.join(selected_bank.get('themes', []))}"
                final_prompt += f"\nTon : {corpus.get('tone', 'Non d√©fini')}"
                final_prompt += f"\nVocabulaire cl√© : {', '.join(corpus.get('vocabulary', []))}"
                final_prompt += f"\nArguments : {chr(10).join([f'- {arg}' for arg in corpus.get('arguments', [])])}"
                final_prompt += f"\nExemples : {chr(10).join([f'- {ex}' for ex in corpus.get('examples', [])])}"
                
                # Ajouter les instructions pour les placeholders
                final_prompt += f"\n\nIMPORTANT - PLACEHOLDERS DE LIENS : Tu DOIS utiliser EXCLUSIVEMENT ces placeholders pour tous les liens :"
                final_prompt += f"\n- [Lien vers OpenCollective] pour le financement participatif"
                final_prompt += f"\n- [Lien vers Documentation] pour la documentation technique"
                final_prompt += f"\n- [Lien vers GitHub] pour le code source"
                final_prompt += f"\n- [Lien vers Discord] pour la communaut√©"
                final_prompt += f"\n- [Lien vers Site Web] pour le site principal"
                final_prompt += f"\n- [Lien vers Blog] pour les actualit√©s"
                final_prompt += f"\n- [Lien vers Forum] pour les discussions"
                final_prompt += f"\n- [Lien vers Wiki] pour la documentation collaborative"
                final_prompt += f"\n- [Lien vers Mastodon] pour le r√©seau social d√©centralis√©"
                final_prompt += f"\n- [Lien vers Nostr] pour le protocole de communication"
                final_prompt += f"\n- [Lien vers IPFS] pour le stockage d√©centralis√©"
                final_prompt += f"\n- [Lien vers G1] pour la monnaie libre"
                final_prompt += f"\n- [Lien vers UPlanet] pour le projet principal"
                final_prompt += f"\n- [Lien vers Astroport] pour l'infrastructure"
                final_prompt += f"\n- [Lien vers Zen] pour la comptabilit√©"
                final_prompt += f"\n- [Lien vers Multipass] pour l'identit√©"
                final_prompt += f"\n\nR√àGLE STRICTE : N'√©cris JAMAIS d'URLs compl√®tes comme 'https://...' dans ton message. Utilise UNIQUEMENT les placeholders ci-dessus."

            # 3. Ajouter le rapport de l'analyste
            analyst_report = self.shared_state.get('analyst_report', "Aucun rapport.")
            final_prompt += f"\n\n--- RAPPORT DE L'ANALYSTE ---\n{analyst_report}"

            # 4. Web-Search avec Perplexica pour enrichir le contexte
            first_target = self.shared_state['targets'][0]
            if first_target.get('website'):
                self.logger.info(f"üïµÔ∏è  Recherche Perplexica sur le site : {first_target['website']}...")
                search_query = f"Fais un r√©sum√© de l'activit√© du site {first_target['website']} et de son propri√©taire {first_target.get('uid', '')} pour comprendre ses centres d'int√©r√™t."

                web_context = self._call_perplexica(search_query)
                self.logger.info("‚úÖ Contexte web obtenu.")
                final_prompt += f"\n\n--- CONTEXTE DU WEB (via Perplexica) ---\n{web_context}"

            # 5. Ajouter un exemple de cible pour la personnalisation
            final_prompt += f"\n\n--- EXEMPLE DE CIBLE ---\n{json.dumps(first_target, indent=2, ensure_ascii=False)}"
            final_prompt += "\n\nMaintenant, en te basant sur TOUTES ces informations, r√©dige le message de campagne final. Ta r√©ponse DOIT √™tre uniquement le message, sans commentaire additionnel."

            self.logger.info("üß† Prompt final construit. Interrogation de l'IA locale via question.py...")

            # --- Appel √† l'IA locale ---
            message_content = self._call_ia_for_writing(final_prompt)
            
            # Appliquer l'injection de liens
            message_content = self._inject_links(message_content, self.shared_state['config'])
            
            # Sauvegarder le message
            message_file = os.path.join(self.shared_state['config']['workspace'], 'message_to_send.txt')
            with open(message_file, 'w', encoding='utf-8') as f:
                f.write(message_content)
            
            self.logger.info("‚úÖ Message de campagne r√©dig√© et sauvegard√© dans workspace/message_to_send.txt. Pr√™t pour validation par l'Op√©rateur.")
            self.shared_state['status']['StrategistAgent'] = "Message r√©dig√© (Mode Classique)"
            
        except Exception as e:
            self.logger.error(f"Erreur lors de la g√©n√©ration en mode Classique : {e}")
            self.shared_state['status']['StrategistAgent'] = f"√âchec : {e}"
