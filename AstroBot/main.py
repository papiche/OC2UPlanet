#!/usr/bin/env python3
import os
import json
import time
import subprocess
import logging
from agents.analyst_agent import AnalystAgent
from agents.strategist_agent import StrategistAgent
from agents.operator_agent import OperatorAgent

class AstroBotOrchestrator:
    def __init__(self):
        self.setup_logging()
        
        # Base directory for robust path construction using home directory
        base_path = os.path.expanduser("~/.zen")
        astroport_one_path = os.path.join(base_path, "Astroport.ONE")
        script_dir = os.path.dirname(os.path.abspath(__file__))

        self.shared_state = {
            "config": {
                # --- Fichiers de donn√©es ---
                "prospect_file": os.path.join(base_path, "game/g1prospect.json"),
                "enriched_prospects_file": os.path.join(script_dir, "workspace", "enriched_prospects.json"),

                # --- Workspace et Prompts (locaux √† l'agent) ---
                "workspace": os.path.join(script_dir, "workspace"),
                "blocklist_file": os.path.join(script_dir, "workspace", "blocklist.json"),
                "strategist_prompt_file": os.path.join(script_dir, "prompts", "strategist_prompt.txt"),
                "analyst_prompt_file": os.path.join(script_dir, "prompts", "analyst_prompt.txt"),
                "analyst_deep_dive_prompt_file": os.path.join(script_dir, "prompts", "analyst_deep_dive_prompt.txt"),
                "analyst_language_prompt_file": os.path.join(script_dir, "prompts", "analyst_language_prompt.txt"),
                "analyst_thematic_prompt_file": os.path.join(script_dir, "prompts", "analyst_thematic_prompt.txt"),
                "analyst_consolidation_prompt_file": os.path.join(script_dir, "prompts", "analyst_consolidation_prompt.txt"),
                
                # --- Configuration des canaux de communication ---
                "cesium_node": "https://g1.data.e-is.pro",   # N≈ìud Cesium+ √† utiliser

                # --- Scripts Externes (dans ~/.zen/Astroport.ONE) ---
                "question_script": os.path.join(astroport_one_path, "IA", "question.py"),
                "jaklis_script": os.path.join(astroport_one_path, "tools", "jaklis", "jaklis.py"),
                "mailjet_script": os.path.join(astroport_one_path, "tools", "mailjet.sh"),
                "nostr_dm_script": os.path.join(astroport_one_path, "tools", "nostr_send_dm.py"),
                "uplanet_nsec": "nsec1...", # A REMPLACER
                "ollama_script": os.path.join(astroport_one_path, "IA", "ollama.me.sh"),
                "perplexica_script_connector": os.path.join(astroport_one_path, "IA", "perplexica.me.sh"),
                "perplexica_script_search": os.path.join(astroport_one_path, "IA", "perplexica_search.sh"),
                
                "send_delay_seconds": 5,
                "uplanet_treasury_g1pub": None,
                "URL_OPEN_COLLECTIVE": "https://opencollective.com/monnaie-libre"
            },
            "status": {},
            "analyst_report": None,
            "targets": [],
            "message_to_send": None,
            "logger": self.logger
        }
        self.agents = {
            "analyste": AnalystAgent(self.shared_state),
            "strat√®ge": StrategistAgent(self.shared_state),
            "op√©rateur": OperatorAgent(self.shared_state),
        }
        os.makedirs(self.shared_state['config']['workspace'], exist_ok=True)
        self.ensure_prospect_file_is_set()
        self.setup_treasury_wallet()
        self.load_existing_targets()

    def setup_logging(self):
        """Met en place un logging centralis√© vers la console et un fichier."""
        log_directory = os.path.expanduser("~/.zen/tmp")
        os.makedirs(log_directory, exist_ok=True)
        log_file = os.path.join(log_directory, 'astrobot.log')

        self.logger = logging.getLogger("AstroBot")
        self.logger.setLevel(logging.DEBUG)  # Passer en mode DEBUG

        # √âvite d'ajouter des handlers si le logger en a d√©j√†
        if self.logger.hasHandlers():
            self.logger.handlers.clear()

        # Handler pour le fichier
        file_handler = logging.FileHandler(log_file)
        file_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
        
        # Handler pour la console
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))

        self.logger.addHandler(file_handler)
        self.logger.addHandler(console_handler)


    def setup_treasury_wallet(self):
        """D√©termine la cl√© publique du portefeuille Tr√©sor UPlanet."""
        self.logger.info("--- Configuration du Portefeuille Tr√©sor UPlanet ---")
        try:
            uplanet_name = os.environ.get('UPLANETNAME', 'UPlanet')
            
            # Construire un chemin absolu et robuste vers le script keygen
            keygen_script = os.path.join(os.path.expanduser("~/.zen"), "Astroport.ONE", "tools", "keygen")
            
            if os.path.exists(keygen_script):
                command = [keygen_script, '-t', 'duniter', f"{uplanet_name}.G1", f"{uplanet_name}.G1"]
                result = subprocess.run(command, capture_output=True, text=True, check=True)
                treasury_pubkey = result.stdout.strip()
            
            if treasury_pubkey:
                self.shared_state['config']['uplanet_treasury_g1pub'] = treasury_pubkey
                self.logger.info(f"‚úÖ Portefeuille Tr√©sor configur√© : {treasury_pubkey[:10]}...")
            else:
                self.logger.warning(f"‚ö†Ô∏è Script keygen non trouv√© : {keygen_script}")
                self.shared_state['config']['uplanet_treasury_g1pub'] = None
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de la configuration du portefeuille Tr√©sor : {e}")
            self.shared_state['config']['uplanet_treasury_g1pub'] = None

    def load_existing_targets(self):
        """Charge automatiquement les cibles existantes au d√©marrage"""
        targets_file = os.path.join(self.shared_state['config']['workspace'], 'todays_targets.json')
        
        if os.path.exists(targets_file):
            try:
                with open(targets_file, 'r') as f:
                    targets = json.load(f)
                
                if targets:
                    self.shared_state['targets'] = targets
                    self.logger.info(f"‚úÖ {len(targets)} cible(s) charg√©e(s) depuis 'todays_targets.json'")
                    
                    # Mettre √† jour le statut de l'Agent Analyste
                    self.shared_state['status']['AnalystAgent'] = f"{len(targets)} cible(s) s√©lectionn√©e(s)"
                    
                    # Afficher un r√©sum√© des cibles
                    languages = {}
                    countries = {}
                    themes = set()
                    
                    for target in targets:
                        metadata = target.get('metadata', {})
                        languages[metadata.get('language', 'unknown')] = languages.get(metadata.get('language', 'unknown'), 0) + 1
                        countries[metadata.get('country', 'unknown')] = countries.get(metadata.get('country', 'unknown'), 0) + 1
                        themes.update(metadata.get('tags', []))
                    
                    self.logger.info(f"üìä R√©sum√© des cibles :")
                    if languages:
                        lang_str = ", ".join([f"{lang}({count})" for lang, count in languages.items()])
                        self.logger.info(f"   üåç Langues : {lang_str}")
                    if countries:
                        country_str = ", ".join([f"{country}({count})" for country, count in countries.items() if country != 'unknown'])
                        if country_str:
                            self.logger.info(f"   üåé Pays : {country_str}")
                    if themes:
                        theme_str = ", ".join(list(themes)[:5])  # Limiter √† 5 th√®mes
                        self.logger.info(f"   üè∑Ô∏è Th√®mes principaux : {theme_str}")
                    
                else:
                    self.logger.info("üì¶ Fichier 'todays_targets.json' vide")
                    
            except (IOError, json.JSONDecodeError) as e:
                self.logger.warning(f"‚ö†Ô∏è Erreur lors du chargement des cibles : {e}")
                self.shared_state['targets'] = []
        else:
            self.logger.debug("üì¶ Aucun fichier 'todays_targets.json' trouv√©")
            self.shared_state['targets'] = []


    def ensure_prospect_file_is_set(self):
        """V√©rifie si le fichier de prospects existe, sinon demande √† l'utilisateur."""
        prospect_file = os.path.expanduser(self.shared_state['config']['prospect_file'])
        
        if os.path.isfile(prospect_file):
            self.logger.info(f"Fichier de prospects trouv√© √† : {prospect_file}")
            return

        self.logger.warning(f"Fichier de prospects non trouv√© √† l'emplacement par d√©faut : {prospect_file}")
        
        while True:
            try:
                new_path = input("Veuillez entrer le chemin complet vers votre fichier g1prospect.json : ")
                expanded_path = os.path.expanduser(new_path)
                if os.path.isfile(expanded_path):
                    self.shared_state['config']['prospect_file'] = expanded_path
                    self.logger.info(f"Chemin du fichier de prospects mis √† jour : {expanded_path}")
                    break
                else:
                    self.logger.error("Chemin invalide ou fichier non trouv√©. Veuillez r√©essayer.")
            except KeyboardInterrupt:
                self.logger.info("\nOp√©ration annul√©e par l'utilisateur.")
                exit()
 

    def print_header(self):
        self.logger.info("\n" + "="*50)
        self.logger.info("üöÄ AstroBot - Orchestrateur de Campagne IA üöÄ")
        self.logger.info("="*50)

    def print_status(self):
        self.logger.info("\n--- √âtat des Agents et du Workspace ---")
        for name, agent in self.agents.items():
            status = agent.get_status()
            self.logger.info(f"üë®‚ÄçüöÄ Agent {name.capitalize()}: {status}")

        # Statut du workspace
        targets_file = os.path.join(self.shared_state['config']['workspace'], 'todays_targets.json')
        if os.path.exists(targets_file):
            try:
                with open(targets_file, 'r') as f:
                    targets = json.load(f)
                
                if targets:
                    # V√©rifier si les cibles sont charg√©es en m√©moire
                    if self.shared_state['targets']:
                        self.logger.info(f"üì¶ Workspace: {len(targets)} cible(s) charg√©e(s) et pr√™tes")
                    else:
                        self.logger.info(f"üì¶ Workspace: {len(targets)} cible(s) en attente dans 'todays_targets.json' (recharger avec option 1)")
                else:
                    self.logger.info("üì¶ Workspace: Fichier 'todays_targets.json' vide")
                    
            except (IOError, json.JSONDecodeError):
                 self.logger.warning("üì¶ Workspace: Fichier de cibles corrompu ou illisible.")
        else:
            self.logger.info("üì¶ Workspace: Aucune cible d√©finie.")
            
        message_file = os.path.join(self.shared_state['config']['workspace'], 'message_to_send.txt')
        if os.path.exists(message_file):
            self.logger.info("üì¶ Workspace: Un message est pr√™t √† √™tre envoy√©.")
        else:
            self.logger.info("üì¶ Workspace: Aucun message √† envoyer.")
        self.logger.info("-" * 37)


    def main_menu(self):
        last_action = None
        while True:
            # self.print_header() # Header is now just logging
            self.print_status()
            
            # --- Affichage des conseils ---
            if last_action == "analysis_complete":
                self.logger.info("\nCONSEIL : Analyse termin√©e. L'√©tape suivante est de lancer l'Agent Strat√®ge (2) pour r√©diger un message.")
            elif last_action == "strategy_complete":
                self.logger.info("\nCONSEIL : Message r√©dig√©. L'√©tape suivante est de lancer l'Agent Op√©rateur (3) pour l'envoyer.")

            print("\nQue souhaitez-vous faire ?")
            print("1. Lancer l'Agent ANALYSTE : Identifier les cibles")
            print("2. Lancer l'Agent STRATEGE : R√©diger le message")
            print("3. Lancer l'Agent OPERATEUR : Envoyer la campagne")
            print("")
            print("4. G√©rer les M√©moires Persona (0-9)")
            print("5. G√©rer les Interactions de l'Op√©rateur")
            print("")
            # print("6. üîÑ Recharger les cibles existantes")
            print("7. Quitter")

            choice = input("> ")

            if choice == "1":
                result = self.run_analyst_submenu()
                if result == "continue":
                    # L'utilisateur veut continuer vers le Strat√®ge
                    self.agents['strat√®ge'].run()
                    if "Message sauvegard√©" in self.shared_state['status'].get('StrategistAgent', ''):
                        last_action = "strategy_complete"
                    else:
                        last_action = None
                elif result == "quit":
                    self.logger.info("√Ä bient√¥t, commandant ! üëã")
                    break
                elif "s√©lectionn√©" in self.shared_state['status'].get('AnalystAgent', ''):
                    last_action = "analysis_complete"
                else:
                    last_action = None
            elif choice == "2":
                self.agents['strat√®ge'].run()
                if "Message sauvegard√©" in self.shared_state['status'].get('StrategistAgent', ''):
                    last_action = "strategy_complete"
                else:
                    last_action = None
            elif choice == "3":
                self.agents['op√©rateur'].run()
                last_action = None # R√©initialiser apr√®s l'envoi
            elif choice == "4":
                self.agents['strat√®ge'].manage_memory_banks()
                last_action = None
            elif choice == "5":
                self.run_operator_submenu()
                last_action = None
            elif choice == "6":
                self.load_existing_targets()
                if self.shared_state['targets']:
                    last_action = "analysis_complete"
                    self.logger.info("‚úÖ Cibles recharg√©es. Vous pouvez maintenant lancer l'Agent Strat√®ge (2).")
                else:
                    self.logger.info("‚ö†Ô∏è Aucune cible √† recharger. Utilisez l'Agent Analyste (1) pour s√©lectionner des cibles.")
                    last_action = None
            elif choice == "7":
                self.logger.info("√Ä bient√¥t, commandant ! üëã")
                break
            else:
                self.logger.warning("Choix invalide, veuillez r√©essayer.")
                last_action = None # R√©initialiser en cas de choix invalide
                time.sleep(1)

    def run_analyst_submenu(self):
        progress = self.agents['analyste'].get_analysis_progress()
        total = progress.get('total', 0)
        gps_prospects = progress.get('gps_prospects', 0)
        lang_total = progress.get('language', 0)
        tags_total = progress.get('tags', 0)

        print("\n--- Menu Analyste ---")
        print(f"Statut de la base de connaissance : {total} profils au total.\n")
        
        print("üöÄ INITIALISATION ET ANALYSE :")
        print(f"1. üåç Analyse G√©o-Linguistique         ({lang_total} / {gps_prospects} profils avec GPS)")
        print(f"2. üè∑Ô∏è Analyse par Th√®mes (Comp√©tences, etc.) ({tags_total} / {total} profils analys√©s)")
        
        print("\nüîß PERSONA - RAFFINAGE ET OPTIMISATION :")
        print("3. üé≠ Cr√©er Banques persona (5-9) automatiquement selon les Th√®mes d√©tect√©s")
        print("4. üåç Ajouter Traductions Banque(s) persona (au choix, 1, 3, ou 0-3)")
        print("5. üîÑ Optimiser les Th√®mes (recalculer le Top 50)")
        print("6. üß™ Mode Test (cible unique pour validation)")
        
        print("\nüéØ CIBLAGE ET EXPORT :")
        print("7. üéØ Ciblage Avanc√© Multi-S√©lection (Th√®mes + Filtres)")
        print("8. üåç Cibler par Langue")
        print("9. üåç Cibler par Pays")
        print("10. üåç Cibler par R√©gion")
        print("11. üìä Lancer une campagne √† partir d'un Th√®me")
        print("12. ‚Ü©Ô∏è  Retour")
        
        choice = input("> ")
        
        if choice == "1":
            self.agents['analyste'].run_geo_linguistic_analysis()
        elif choice == "2":
            self.agents['analyste'].run_thematic_analysis()
        elif choice == "3":
            self.agents['analyste'].create_automatic_personas()
        elif choice == "4":
            self.agents['analyste'].translate_persona_bank()
        elif choice == "5":
            self.agents['analyste'].optimize_thematic_analysis()
        elif choice == "6":
            self.agents['analyste'].run_test_mode()
        elif choice == "7":
            result = self.agents['analyste'].advanced_multi_selection_targeting()
            if result == "continue":
                return "continue"
            elif result == "quit":
                return "quit"
        elif choice == "8":
            result = self.agents['analyste'].select_cluster_by_language()
            if result == "continue":
                return "continue"
            elif result == "quit":
                return "quit"
        elif choice == "9":
            result = self.agents['analyste'].select_cluster_by_country()
            if result == "continue":
                return "continue"
            elif result == "quit":
                return "quit"
        elif choice == "10":
            result = self.agents['analyste'].select_cluster_by_region()
            if result == "continue":
                return "continue"
            elif result == "quit":
                return "quit"
        elif choice == "11":
            result = self.agents['analyste'].select_cluster_from_tags()
            if result == "continue":
                return "continue"
            elif result == "quit":
                return "quit"
        elif choice == "12":
            return
        else:
            self.logger.warning("Choix invalide.")
        
        time.sleep(1) # Pause apr√®s chaque action

    def run_operator_submenu(self):
        """Sous-menu pour g√©rer les interactions de l'Op√©rateur"""
        print("\n--- Menu Op√©rateur ---")
        print("Gestion des interactions et r√©ponses automatiques :")
        print("1. Voir l'historique des interactions")
        print("2. Traiter une r√©ponse re√ßue")
        print("3. Configurer les r√©ponses automatiques")
        print("4. Retour")
        
        choice = input("> ")
        
        if choice == "1":
            self._view_interaction_history()
        elif choice == "2":
            self._process_incoming_response()
        elif choice == "3":
            self._configure_auto_responses()
        elif choice == "4":
            return
        else:
            self.logger.warning("Choix invalide.")
        
        time.sleep(1)

    def _view_interaction_history(self):
        """Interface pour voir l'historique des interactions"""
        print("\nüìö CONSULTATION DE L'HISTORIQUE")
        print("-" * 40)
        
        # Utiliser la nouvelle interface am√©lior√©e
        self.agents['op√©rateur'].view_interaction_history()

    def _process_incoming_response(self):
        """Interface pour traiter une r√©ponse re√ßue"""
        print("\nüì® TRAITEMENT D'UNE R√âPONSE RE√áUE")
        print("-" * 40)
        
        # Option 1: Lire automatiquement les nouveaux messages
        print("Options :")
        print("1. Lire les nouveaux messages (Jaklis)")
        print("2. Traiter une r√©ponse manuelle")
        
        choice = input("> ")
        
        if choice == "1":
            # Utiliser la fonction de lecture automatique
            self.agents['op√©rateur']._run_receive_messages()
        elif choice == "2":
            # Interface manuelle
            self._process_manual_response()
        else:
            print("‚ùå Choix invalide")
            return

    def _process_manual_response(self):
        """Interface manuelle pour traiter une r√©ponse"""
        print("\nüìù TRAITEMENT MANUEL D'UNE R√âPONSE")
        print("-" * 40)
        
        # Demander les informations
        target_pubkey = input("Cl√© publique de la cible : ").strip()
        if not target_pubkey:
            print("‚ùå Cl√© publique requise")
            return
        
        target_uid = input("UID de la cible : ").strip()
        if not target_uid:
            print("‚ùå UID requis")
            return
        
        incoming_message = input("Message re√ßu : ").strip()
        if not incoming_message:
            print("‚ùå Message requis")
            return
        
        try:
            slot = input("Slot (0-11, Entr√©e pour 0) : ").strip()
            slot = int(slot) if slot else 0
            if not (0 <= slot <= 11):
                print("‚ùå Slot invalide")
                return
        except ValueError:
            print("‚ùå Entr√©e invalide")
            return
        
        # Traiter la r√©ponse
        response = self.agents['op√©rateur'].process_incoming_response(
            target_pubkey, target_uid, incoming_message, slot
        )
        
        if response:
            print(f"\n‚úÖ R√©ponse automatique g√©n√©r√©e et envoy√©e :")
            print(f"üìù {response}")
        else:
            print(f"\n‚ö†Ô∏è R√©ponse n√©cessite une intervention manuelle")

    def _configure_auto_responses(self):
        """Interface pour configurer les r√©ponses automatiques"""
        print("\n‚öôÔ∏è CONFIGURATION DES R√âPONSES AUTOMATIQUES")
        print("-" * 40)
        print("Cette fonctionnalit√© sera impl√©ment√©e dans une prochaine version.")
        print("Pour l'instant, les r√©ponses automatiques sont bas√©es sur des mots-cl√©s pr√©d√©finis.")
        
        # Afficher les mots-cl√©s actuels
        print("\nMots-cl√©s positifs (r√©ponse automatique) :")
        positive_keywords = [
            'merci', 'thanks', 'int√©ressant', 'int√©ress√©', 'oui', 'yes', 'ok', 'd\'accord',
            'plus d\'info', 'plus d\'information', 'comment', 'comment faire',
            'o√π', 'quand', 'combien', 'prix', 'co√ªt', 'participer', 'rejoindre'
        ]
        for keyword in positive_keywords:
            print(f"  - {keyword}")
        
        print("\nMots-cl√©s n√©gatifs (intervention manuelle) :")
        negative_keywords = [
            'non', 'no', 'pas int√©ress√©', 'not interested', 'stop', 'arr√™ter',
            'supprimer', 'delete', 'd√©sabonner', 'unsubscribe', 'probl√®me', 'erreur',
            'plainte', 'complaint', 'insatisfait', 'dissatisfied'
        ]
        for keyword in negative_keywords:
            print(f"  - {keyword}")


if __name__ == "__main__":
    orchestrator = AstroBotOrchestrator()
    orchestrator.main_menu() 