#!/bin/bash
########################################################################
# Test Single Message to Specific G1 Pubkey
########################################################################
source ~/.zen/Astroport.ONE/tools/my.sh

TEST_PUBKEY="DsEx1pS33vzYZg4MroyBV9hCw98j1gtHEhwiZ5tK7ech"

echo "=== Test Single Message to G1 Pubkey ==="
echo ""
echo "Test pubkey: $TEST_PUBKEY"
echo ""

# Check if jaklis exists
if [[ ! -f "$HOME/.zen/Astroport.ONE/tools/jaklis/jaklis.py" ]]; then
    echo "ERROR: jaklis.py not found"
    exit 1
fi

# Check environment variables
if [[ -z "${CAPTAINEMAIL:-}" ]]; then
    echo "ERROR: CAPTAINEMAIL environment variable not set"
    exit 1
fi

echo "✓ jaklis.py found"
echo "✓ CAPTAINEMAIL is set: $CAPTAINEMAIL"
echo ""

# Test message content
SUBJECT="Test G1FabLab & CopyLaRadio - Votre souveraineté numérique"
MESSAGE="Bonjour,

Ceci est un message de test pour vérifier le fonctionnement du système d'envoi de messages G1FabLab & CopyLaRadio.

🏗️ G1FabLab (https://g1sms.fr) :
- Services informatiques pour la communauté Ğ1
- Dégooglisation de smartphones
- Installation Linux avec assistance RustDesk

🌐 CopyLaRadio (https://copylaradio.com) :
- Coopérative d'auto-hébergeurs en toile de confiance
- NextCloud, IA et Blockchain

🚀 UPlanet ORIGIN : https://qo-op.com

Cordialement,
L'équipe G1FabLab & CopyLaRadio"

echo "Subject: $SUBJECT"
echo ""
echo "Message preview:"
echo "$MESSAGE" | head -10
echo "..."
echo ""

# Ask for confirmation
read -p "Send test message? (y/N): " -n 1 -r
echo ""

if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Test cancelled"
    exit 0
fi

echo "Sending test message..."
echo ""

# Test different Cesium nodes
CESIUM_NODES=(
    "https://g1.data.brussels.ovh"
    "https://g1data.dynssl.com"
    "https://g1.data.e-is.pro"
    "https://g1.data.pini.fr"
)

echo "Testing Cesium nodes availability..."
echo ""

# Arrays to store working and failed nodes
WORKING_NODES=()
FAILED_NODES=()

# Test each node
for node in "${CESIUM_NODES[@]}"; do
    echo "Testing node: $node"
    
    # Test basic connectivity
    if curl -s --connect-timeout 5 "$node" >/dev/null 2>&1; then
        echo "✓ Node $node is reachable"
        
        # Test profile endpoint
        profile_url="$node/user/profile/$TEST_PUBKEY"
        if curl -s --connect-timeout 5 "$profile_url" >/dev/null 2>&1; then
            echo "✓ Profile endpoint working"
            
            # Try to send message with this node
            echo "Attempting to send message via $node..."
            
            python3 "$HOME/.zen/Astroport.ONE/tools/jaklis/jaklis.py" \
                -k "$HOME/.zen/game/nostr/$CAPTAINEMAIL/.secret.dunikey" \
                -n "$node" \
                send \
                -d "$TEST_PUBKEY" \
                -t "$SUBJECT" \
                -m "$MESSAGE"
            
            if [[ $? -eq 0 ]]; then
                echo ""
                echo "✅ SUCCESS: Message sent via $node"
                echo "Check your Cesium inbox to verify receipt"
                WORKING_NODES+=("$node")
                break  # Exit loop on first success
            else
                echo "❌ Failed with node $node"
                FAILED_NODES+=("$node")
            fi
        else
            echo "✗ Profile endpoint not working"
            FAILED_NODES+=("$node")
        fi
    else
        echo "✗ Node $node is not reachable"
        FAILED_NODES+=("$node")
    fi
    echo ""
done

# Save working nodes to .env file
if [[ ${#WORKING_NODES[@]} -gt 0 ]]; then
    echo "Saving working nodes to .env file..."
    
    # Create or update .env file
    cat > .env << EOF
# Cesium nodes configuration
# Generated by test_single_message.sh on $(date)

# Working Cesium nodes (tested and functional)
CESIUM_WORKING_NODES=${WORKING_NODES[*]}

# Primary Cesium node (first working node)
CESIUM_PRIMARY_NODE=${WORKING_NODES[0]}

# Failed nodes (for reference)
CESIUM_FAILED_NODES=${FAILED_NODES[*]}

# Test results summary
CESIUM_TOTAL_TESTED=${#CESIUM_NODES[@]}
CESIUM_WORKING_COUNT=${#WORKING_NODES[@]}
CESIUM_FAILED_COUNT=${#FAILED_NODES[@]}

# Original environment variables (if they exist)
$(env | grep -E '^(CAPTAINEMAIL|contactG1PUB|OCSLUG|OCAPIKEY)=' || true)
EOF

    echo "✅ .env file updated with working nodes"
    echo "Primary node: ${WORKING_NODES[0]}"
    echo "Working nodes: ${WORKING_NODES[*]}"
else
    echo "❌ ERROR: No working Cesium nodes found"
    echo "Failed nodes: ${FAILED_NODES[*]}"
fi

echo ""
echo "=== Test Completed ===" 