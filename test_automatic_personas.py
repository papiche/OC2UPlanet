#!/usr/bin/env python3
"""
Script de test pour la cr√©ation automatique de personas
D√©montre la g√©n√©ration de personas bas√©s sur les th√®mes d√©tect√©s
"""

import sys
import json
import os
from collections import Counter

# Ajouter le chemin vers AstroBot
sys.path.append('AstroBot')

from AstroBot.agents.analyst_agent import AnalystAgent

def simulate_automatic_personas():
    """Simule la cr√©ation automatique de personas"""
    
    print("üé≠ TEST DE CR√âATION AUTOMATIQUE DE PERSONAS")
    print("=" * 60)
    
    try:
        # Configuration minimale pour l'agent
        shared_state = {
            'config': {
                'workspace': 'AstroBot/workspace',
                'question_script': 'AstroBot/scripts/question.py',
                'enriched_prospects_file': 'AstroBot/workspace/enriched_prospects.json',
                'prospect_file': '~/.zen/game/g1prospect.json'
            },
            'logger': None,
            'status': {}
        }
        
        # Configuration du logger
        import logging
        logging.basicConfig(level=logging.INFO)
        shared_state['logger'] = logging.getLogger(__name__)
        
        # Cr√©er une instance de l'agent
        agent = AnalystAgent(shared_state)
        
        # Simuler une base de connaissance avec des th√®mes
        print("üìä Simulation d'une base de connaissance avec th√®mes...")
        
        # Cr√©er un fichier de test temporaire
        test_kb_file = 'AstroBot/workspace/test_enriched_prospects.json'
        os.makedirs('AstroBot/workspace', exist_ok=True)
        
        # Donn√©es de test avec des th√®mes vari√©s
        test_data = {
            "pubkey1": {
                "uid": "Alice",
                "profile": {"_source": {"description": "D√©veloppeuse passionn√©e par les cryptomonnaies"}},
                "metadata": {"tags": ["developpeur", "crypto", "blockchain", "technologie"]}
            },
            "pubkey2": {
                "uid": "Bob",
                "profile": {"_source": {"description": "Militant pour la libert√© num√©rique"}},
                "metadata": {"tags": ["militant", "liberte", "privacy", "decentralisation"]}
            },
            "pubkey3": {
                "uid": "Charlie",
                "profile": {"_source": {"description": "Artiste num√©rique et cr√©ateur"}},
                "metadata": {"tags": ["artiste", "creation", "numerique", "culture"]}
            },
            "pubkey4": {
                "uid": "Diana",
                "profile": {"_source": {"description": "√âconomiste sp√©cialis√©e en monnaies alternatives"}},
                "metadata": {"tags": ["economiste", "monnaie", "alternative", "finance"]}
            },
            "pubkey5": {
                "uid": "Eve",
                "profile": {"_source": {"description": "Th√©rapeute holistique et coach bien-√™tre"}},
                "metadata": {"tags": ["therapeute", "holistique", "bien-etre", "sante"]}
            },
            "pubkey6": {
                "uid": "Frank",
                "profile": {"_source": {"description": "D√©veloppeur open source"}},
                "metadata": {"tags": ["developpeur", "open-source", "logiciel-libre", "technologie"]}
            },
            "pubkey7": {
                "uid": "Grace",
                "profile": {"_source": {"description": "Militant √©cologiste"}},
                "metadata": {"tags": ["militant", "ecologie", "environnement", "durabilite"]}
            },
            "pubkey8": {
                "uid": "Henry",
                "profile": {"_source": {"description": "Cr√©ateur de contenu digital"}},
                "metadata": {"tags": ["createur", "contenu", "digital", "media"]}
            }
        }
        
        # Sauvegarder les donn√©es de test
        with open(test_kb_file, 'w', encoding='utf-8') as f:
            json.dump(test_data, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ Base de test cr√©√©e avec {len(test_data)} profils")
        
        # Analyser les th√®mes
        all_tags = []
        for pubkey, data in test_data.items():
            tags = data.get('metadata', {}).get('tags', [])
            if tags:
                all_tags.extend(tags)
        
        tag_counts = Counter(all_tags)
        top_5_themes = tag_counts.most_common(5)
        
        print(f"\nüìä Top 5 des th√®mes d√©tect√©s :")
        for i, (theme, count) in enumerate(top_5_themes, 1):
            print(f"  {i}. {theme} ({count} occurrences)")
        
        # Simuler la cr√©ation de personas
        print(f"\nüé≠ Simulation de cr√©ation de personas...")
        
        # Charger la configuration des banques existante
        banks_config_file = 'AstroBot/workspace/memory_banks_config.json'
        if os.path.exists(banks_config_file):
            with open(banks_config_file, 'r', encoding='utf-8') as f:
                banks_config = json.load(f)
        else:
            banks_config = {'banks': {}, 'available_themes': []}
        
        # Simuler la cr√©ation pour chaque th√®me
        for i, (theme, count) in enumerate(top_5_themes):
            bank_slot = str(5 + i)
            
            print(f"\nüé≠ Th√®me '{theme}' -> Banque {bank_slot}")
            
            # Simuler un persona g√©n√©r√©
            simulated_persona = {
                "name": f"Le {theme.title()}",
                "archetype": f"Expert en {theme}",
                "description": f"Persona sp√©cialis√© dans le domaine de {theme}",
                "corpus": {
                    "tone": "professionnel et engageant",
                    "vocabulary": [theme, "expertise", "sp√©cialisation", "connaissance"],
                    "arguments": [
                        f"UPlanet offre des opportunit√©s uniques dans le domaine de {theme}",
                        f"La d√©centralisation r√©volutionne l'approche du {theme}",
                        f"Rejoignez une communaut√© d'experts en {theme}"
                    ],
                    "examples": [
                        f"En tant qu'expert en {theme}, vous appr√©cierez notre approche innovante",
                        f"Notre plateforme transforme le {theme} gr√¢ce √† la blockchain",
                        f"D√©couvrez comment UPlanet r√©volutionne le {theme}"
                    ]
                }
            }
            
            # Remplir la banque
            banks_config['banks'][bank_slot] = {
                'name': simulated_persona['name'],
                'archetype': simulated_persona['archetype'],
                'description': simulated_persona['description'],
                'themes': [theme],
                'corpus': simulated_persona['corpus']
            }
            
            print(f"  ‚úÖ {simulated_persona['name']} ({simulated_persona['archetype']})")
        
        # Sauvegarder la configuration
        with open(banks_config_file, 'w', encoding='utf-8') as f:
            json.dump(banks_config, f, indent=2, ensure_ascii=False)
        
        print(f"\nüéâ Simulation termin√©e ! {len(top_5_themes)} personas cr√©√©s")
        
        # Afficher le r√©sum√©
        print(f"\nüìã R√âSUM√â DES PERSONAS CR√â√âS :")
        for i, (theme, count) in enumerate(top_5_themes):
            bank_slot = str(5 + i)
            bank = banks_config['banks'].get(bank_slot, {})
            if bank:
                print(f"  Banque {bank_slot} : {bank['name']} ({bank['archetype']})")
                print(f"    Th√®me : {theme}")
                print(f"    Ton : {bank['corpus']['tone']}")
                print(f"    Vocabulaire : {', '.join(bank['corpus']['vocabulary'][:3])}...")
                print()
        
        # Nettoyer le fichier de test
        os.remove(test_kb_file)
        print("üßπ Fichier de test nettoy√©")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test : {e}")
        import traceback
        traceback.print_exc()

def main():
    """Test principal"""
    simulate_automatic_personas()
    
    print(f"\n‚úÖ Test termin√© !")
    print(f"üí° L'Agent Analyste peut maintenant cr√©er automatiquement des personas")
    print(f"üí° Les banques 5-9 sont remplies selon les th√®mes les plus fr√©quents")
    print(f"üí° Chaque persona est adapt√© au th√®me d√©tect√© dans la communaut√©")

if __name__ == "__main__":
    main() 